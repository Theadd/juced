/* ==================================== JUCER_BINARY_RESOURCE ====================================

   This is an auto-generated file: Any edits you make may be overwritten!

*/

namespace BinaryData
{

//================== button.png ==================
static const unsigned char temp_9377c8f2[] =
{ 137,80,78,71,13,10,26,10,0,0,0,13,73,72,68,82,0,0,0,32,0,0,0,32,8,6,0,0,0,115,122,122,244,0,0,2,40,73,68,65,84,120,94,205,151,63,107,20,65,24,198,159,119,119,246,178,151,245,144,28,70,197,104,184,136,94,254,24,21,163,32,118,98,97,109,99,101,113,151,86,
68,196,66,16,65,22,27,65,212,66,130,165,73,138,84,226,23,208,230,42,65,212,8,33,209,32,10,167,114,129,144,228,206,112,57,179,255,102,198,157,219,4,253,0,185,157,252,96,138,173,126,15,239,62,195,187,75,247,30,79,192,235,27,69,159,183,84,218,155,203,185,
189,249,158,2,58,200,74,189,81,93,111,54,221,154,125,104,218,174,205,131,16,51,49,243,114,242,100,241,88,121,108,100,16,78,214,70,39,105,109,122,152,251,250,29,159,62,47,78,221,184,118,117,156,61,121,49,83,58,53,88,44,159,27,29,2,17,161,229,5,232,36,
140,49,156,25,46,194,247,131,114,236,174,176,156,227,184,197,129,126,68,66,128,115,129,78,19,113,14,211,52,48,114,252,40,190,253,248,229,210,171,215,21,121,241,252,89,24,134,129,52,17,66,160,242,238,35,88,87,38,3,33,36,136,100,202,1,36,148,155,222,188,
125,47,199,78,12,65,7,179,11,139,96,66,74,168,163,1,229,77,2,72,157,1,164,208,23,64,185,13,37,215,133,252,55,1,104,155,0,19,146,107,44,33,7,83,110,109,29,144,0,19,26,75,168,220,76,201,9,72,253,53,24,68,73,9,133,20,80,164,222,68,34,196,238,100,2,74,157,
178,30,242,255,107,136,228,65,215,53,20,32,13,1,146,222,137,93,49,129,237,0,186,150,145,212,56,129,173,117,188,157,70,195,4,118,203,54,36,162,244,111,1,81,82,66,63,240,193,121,4,32,189,181,108,16,181,157,202,205,124,63,64,196,69,251,179,60,140,56,210,
192,52,141,182,83,185,89,179,181,81,93,107,172,23,14,244,230,17,132,17,210,160,43,99,97,121,165,14,229,54,47,92,186,252,219,15,194,43,135,15,238,135,211,157,77,186,208,129,15,85,34,130,197,88,251,223,211,243,124,124,152,91,192,242,234,218,45,66,204,253,
167,207,39,7,250,143,148,79,15,23,177,47,223,3,102,154,48,227,179,147,112,206,17,197,103,181,222,192,236,252,23,252,172,45,77,61,184,125,125,156,176,197,221,71,207,74,89,219,118,247,56,221,5,139,89,176,44,11,59,73,24,134,8,163,16,27,173,63,213,77,207,
115,31,222,185,57,141,152,191,244,87,89,82,163,202,249,95,0,0,0,0,73,69,78,68,174,66,96,130,0,0 };

const char* button_png = (const char*) temp_9377c8f2;

//================== label.png ==================
static const unsigned char temp_b67d0c0a[] =
{ 137,80,78,71,13,10,26,10,0,0,0,13,73,72,68,82,0,0,0,24,0,0,0,24,8,6,0,0,0,224,119,61,248,0,0,2,174,73,68,65,84,120,94,197,149,203,107,83,65,20,198,191,153,123,69,168,138,182,139,234,218,218,164,184,176,164,47,210,64,193,174,68,253,59,212,250,92,136,47,
112,109,169,238,173,5,23,110,68,255,1,91,23,214,66,31,182,77,164,90,187,73,123,163,6,119,42,244,129,182,66,72,114,199,115,39,231,142,185,14,77,40,69,28,242,203,12,51,223,156,239,156,19,238,13,254,245,16,4,134,30,220,59,225,186,238,125,165,84,183,173,
136,76,6,101,45,88,39,196,219,82,169,116,251,206,173,187,75,0,224,18,160,224,79,206,156,62,155,56,214,18,19,219,167,97,3,101,75,63,126,242,78,141,189,28,109,6,208,105,12,40,243,142,182,248,113,228,191,228,160,42,89,192,192,209,249,219,68,86,85,43,165,
52,90,75,113,196,232,216,139,14,240,144,168,18,150,125,95,11,193,208,218,132,82,1,66,17,118,112,48,101,191,28,234,13,110,117,23,164,148,144,58,115,105,42,0,33,184,170,170,193,230,122,1,83,129,242,173,110,74,152,193,6,210,33,164,89,59,52,59,142,3,111,
197,195,195,225,97,140,60,26,65,169,84,214,123,142,173,7,32,182,51,16,70,24,53,114,52,147,147,83,200,127,206,195,203,229,240,97,105,41,220,183,146,66,205,10,68,52,184,35,29,205,198,198,6,178,203,89,36,18,9,173,203,164,211,85,231,81,19,212,107,145,208,
38,140,83,33,61,159,214,130,254,147,253,56,218,210,130,28,85,177,190,182,30,158,27,189,16,117,12,72,16,109,145,168,24,206,205,207,162,241,80,35,90,91,99,232,234,232,212,218,249,116,154,53,59,105,145,20,97,80,99,180,156,205,98,141,178,237,238,233,9,30,
72,116,118,117,85,12,230,230,72,39,34,217,75,187,2,184,127,87,32,2,147,0,190,60,61,51,163,5,227,227,175,48,49,241,218,104,87,215,86,225,121,43,104,139,183,1,190,15,72,1,31,162,94,139,68,0,27,73,108,110,110,97,113,241,61,26,26,26,208,155,74,33,153,76,
106,98,241,184,214,191,153,157,53,90,61,139,122,6,96,3,38,232,189,79,217,245,38,123,49,112,254,34,6,46,92,210,92,189,124,77,107,222,45,44,160,80,40,68,238,212,108,17,4,155,176,217,244,212,148,22,165,82,41,254,49,43,1,154,26,155,208,222,222,78,213,45,
34,147,201,160,175,175,143,239,212,50,176,157,48,56,56,100,158,7,110,29,183,210,199,141,235,55,245,187,135,42,212,51,56,120,93,3,131,138,46,205,139,45,92,219,218,250,6,230,114,24,82,133,248,160,15,124,161,13,194,61,158,89,203,88,6,252,4,123,223,190,127,
141,29,110,62,130,221,14,138,19,196,203,69,12,138,197,226,185,103,207,159,62,166,126,198,118,99,192,213,229,233,53,114,165,214,159,225,30,98,31,115,128,56,72,236,39,246,242,153,228,174,23,137,95,196,15,102,147,248,73,108,241,249,142,134,224,192,46,35,
121,239,255,143,223,111,12,33,89,205,193,158,240,0,0,0,0,73,69,78,68,174,66,96,130,0,0 };

const char* label_png = (const char*) temp_b67d0c0a;

//================== window.png ==================
static const unsigned char temp_ed1ceeb0[] =
{ 137,80,78,71,13,10,26,10,0,0,0,13,73,72,68,82,0,0,0,128,0,0,0,128,8,6,0,0,0,195,62,97,203,0,0,38,95,73,68,65,84,120,94,236,154,107,172,93,197,117,199,255,107,246,62,207,199,189,231,190,124,175,49,141,109,100,55,177,49,73,65,22,78,193,53,96,112,213,24,
197,253,210,18,20,212,72,60,26,169,253,208,246,75,85,196,151,180,159,168,154,170,37,234,151,170,164,141,212,60,168,72,212,84,69,32,17,26,57,148,134,135,98,74,104,10,196,190,196,198,16,30,190,126,224,235,235,123,239,57,123,239,153,213,61,75,51,26,237,
108,157,156,123,176,3,74,241,146,230,206,99,207,221,123,159,249,173,181,102,205,204,38,102,198,135,87,46,137,194,135,87,46,201,37,5,184,36,49,222,87,185,36,215,93,119,93,3,24,107,68,209,114,91,199,173,170,74,147,26,16,55,50,226,122,5,220,54,196,115,74,
81,19,154,215,1,136,32,162,52,34,188,197,25,31,83,10,111,38,73,245,167,207,62,251,216,57,92,4,121,143,49,192,37,185,233,166,155,234,253,126,173,25,69,58,7,153,229,32,73,64,18,113,93,35,107,147,81,115,20,161,75,140,105,6,77,19,104,2,200,161,42,116,193,
104,49,163,73,196,53,54,168,130,80,99,70,133,104,152,71,102,16,209,34,64,111,130,241,148,6,127,23,218,188,240,244,211,7,95,189,8,10,112,9,164,82,84,211,58,171,2,220,32,138,235,0,183,89,233,89,50,81,23,224,105,128,102,0,30,99,208,28,41,76,88,144,96,52,
65,92,51,140,42,129,107,204,84,0,25,198,55,148,137,72,146,82,10,81,20,231,41,202,147,148,17,199,49,148,202,235,54,39,2,64,96,24,164,73,138,126,191,135,94,111,21,105,154,34,220,71,157,4,153,131,48,234,193,56,206,190,119,240,224,193,236,67,169,0,91,183,
238,175,205,205,45,53,149,82,109,173,163,60,167,22,179,153,4,84,199,24,51,174,84,52,102,193,50,81,158,211,36,193,140,131,115,144,132,46,3,109,129,73,92,13,32,81,41,199,72,140,192,19,101,144,113,4,69,10,181,90,13,149,74,21,113,165,130,170,203,45,216,106,
165,134,106,173,138,106,181,150,247,169,67,218,170,85,84,242,246,72,41,80,158,20,217,92,238,41,128,189,226,104,173,37,45,47,159,199,201,147,39,112,250,212,2,78,229,233,220,185,69,0,176,74,148,17,209,227,108,178,191,124,234,169,131,255,245,75,171,0,251,
247,239,175,157,61,123,182,21,69,173,118,166,208,138,116,214,2,162,9,86,102,12,76,99,10,2,176,65,204,29,142,168,11,230,73,102,158,5,81,151,128,22,51,183,0,52,0,110,2,84,47,90,95,217,34,197,198,148,242,32,5,138,183,74,1,41,128,170,2,178,226,64,198,21,
7,209,166,186,128,180,215,108,63,1,168,162,200,2,148,4,16,136,224,242,226,123,148,83,80,50,192,247,3,136,130,178,229,160,173,66,73,158,166,9,78,188,243,54,142,189,246,42,142,30,125,21,58,77,17,199,209,121,54,248,194,250,245,147,95,122,248,225,135,245,
7,166,0,59,118,236,168,142,141,93,222,182,174,53,83,73,43,54,81,19,224,9,77,81,59,6,119,153,217,130,20,139,36,198,56,136,44,200,57,16,186,0,119,136,169,201,224,134,88,45,163,78,68,165,193,243,101,34,42,38,165,32,176,34,1,131,122,189,110,97,90,112,22,
154,180,73,170,86,165,189,94,171,163,222,104,160,18,91,107,141,33,32,163,200,89,101,4,18,114,44,72,36,231,0,208,24,35,137,217,230,12,195,6,108,32,117,230,50,68,39,1,166,40,79,236,188,129,188,19,170,57,96,165,8,218,24,41,87,27,117,52,58,29,41,71,138,16,
71,202,130,134,2,129,147,20,186,183,130,195,243,71,240,200,19,79,224,165,23,95,20,165,52,204,95,172,68,250,62,153,18,126,81,10,112,195,13,55,108,206,178,104,123,20,169,43,153,177,129,8,227,6,232,18,72,32,50,120,236,103,65,2,4,128,3,68,150,154,7,41,63,
28,112,218,30,71,2,197,3,107,54,155,2,170,150,131,107,181,219,57,216,6,26,22,156,12,154,179,212,170,184,92,11,90,220,173,88,179,82,222,202,5,6,130,181,65,91,104,70,67,64,106,15,82,146,5,224,32,51,216,182,9,121,7,31,12,114,191,5,32,81,156,200,41,158,148,
163,8,117,171,92,57,188,74,28,219,251,9,84,255,59,0,56,111,67,88,89,93,69,28,69,200,116,134,165,165,37,156,207,211,216,248,56,174,184,226,10,64,41,172,158,120,7,71,254,229,235,232,45,158,69,242,238,25,36,139,139,200,206,47,65,175,44,35,93,94,130,233,
37,168,54,90,216,254,167,247,226,63,79,158,193,163,223,254,182,252,246,76,235,47,62,243,253,131,127,198,185,92,52,5,216,179,103,207,122,141,234,239,41,96,31,192,59,140,225,57,48,96,156,5,0,69,139,84,202,166,72,192,120,55,217,106,181,44,56,177,204,206,
216,152,45,91,160,206,165,214,108,95,7,208,206,149,97,190,140,84,36,3,43,32,1,175,60,2,78,160,177,113,101,111,153,218,195,12,109,14,176,188,179,241,158,132,29,70,47,4,229,172,140,72,89,56,2,46,138,189,87,32,105,19,171,173,213,33,1,156,82,226,146,181,
214,254,185,88,204,129,45,44,44,72,208,118,237,181,187,4,106,210,239,227,177,199,30,197,252,145,195,182,143,5,110,147,243,42,6,68,36,222,103,101,121,5,159,255,195,63,192,181,191,118,53,190,243,185,219,209,59,244,12,214,205,205,161,217,108,160,81,171,
65,82,67,198,10,141,122,29,243,243,63,193,241,122,11,251,255,253,9,60,244,208,55,240,175,223,250,150,29,107,179,178,188,116,207,243,207,63,251,149,11,86,0,162,191,80,215,95,255,189,223,39,21,229,26,133,205,105,154,88,56,2,112,106,106,10,51,211,51,232,
118,187,24,207,83,174,225,2,81,92,175,115,191,245,186,0,15,3,25,9,80,79,17,32,120,43,132,97,15,208,3,213,210,230,235,236,203,126,238,116,32,13,155,224,85,194,28,47,16,73,10,2,78,234,74,17,194,188,42,96,5,186,82,126,254,38,72,157,20,64,0,193,247,135,23,
249,191,167,159,254,62,158,123,238,25,1,214,207,225,38,137,40,129,159,158,208,105,119,176,188,178,130,169,233,41,220,123,239,125,120,242,201,131,248,230,195,223,196,111,92,127,139,120,170,241,124,252,166,103,166,243,178,66,167,211,194,228,212,4,90,173,
14,30,252,135,191,71,165,81,197,157,7,14,224,209,79,237,197,158,107,62,142,117,51,51,168,86,98,212,196,144,98,84,108,172,65,4,3,224,181,215,142,225,59,135,143,98,255,163,7,81,109,181,240,119,15,60,144,63,235,201,188,95,244,198,201,133,83,55,30,62,252,
63,71,223,243,70,208,238,221,187,59,187,119,215,255,22,20,221,157,166,169,0,223,115,195,141,216,185,115,39,102,214,173,179,22,45,150,237,131,29,129,194,222,234,164,12,118,64,29,72,233,147,101,89,97,46,117,16,5,104,104,131,212,125,112,68,66,128,4,88,68,
82,23,56,30,18,20,160,224,160,5,79,20,64,74,82,16,142,84,140,232,125,19,124,188,225,222,135,8,96,184,235,146,145,204,215,71,114,43,254,218,87,255,25,215,255,250,94,92,254,137,141,24,27,235,160,209,172,163,217,170,163,94,175,229,229,6,154,141,22,78,156,
56,137,251,239,255,2,22,22,242,232,253,244,41,108,222,184,5,251,110,249,52,178,180,143,184,26,161,90,139,80,207,97,87,235,54,22,80,50,150,237,78,27,73,150,202,184,169,216,42,101,36,227,165,8,136,156,34,18,216,143,7,180,54,50,205,201,152,25,224,179,119,
220,129,195,249,251,157,57,125,230,87,58,157,246,103,0,220,63,154,2,132,96,174,61,57,185,254,107,12,28,176,86,127,243,45,251,112,219,109,159,201,193,207,248,165,137,64,182,215,66,244,138,162,149,250,57,212,176,3,175,75,214,238,45,217,178,38,48,138,226,
7,95,73,174,148,84,160,64,1,162,20,169,152,7,164,33,250,103,128,201,56,208,30,124,16,38,2,49,23,158,91,22,150,193,62,121,114,1,221,241,41,220,188,247,86,40,69,98,197,181,122,37,135,105,167,134,88,218,180,102,239,170,229,29,148,133,196,6,73,210,135,140,
25,89,184,21,164,17,65,69,12,64,96,59,165,23,182,33,240,149,28,126,76,5,182,215,106,195,161,127,166,83,172,155,157,197,222,189,55,227,161,111,124,29,149,122,237,0,17,253,13,51,247,71,82,0,34,138,119,237,218,243,215,32,28,32,0,119,222,117,55,62,117,235,
173,176,148,122,189,30,128,178,5,245,251,41,122,171,189,60,245,145,164,169,104,35,32,112,3,86,246,92,216,195,146,134,96,177,197,123,18,21,255,49,128,100,201,137,200,213,1,114,237,196,36,245,193,8,1,42,55,132,144,189,44,0,21,11,202,77,45,22,100,20,201,
138,1,198,40,73,97,117,226,35,140,178,136,135,209,12,45,201,32,77,180,212,193,10,90,224,6,97,112,33,56,205,140,6,103,2,29,98,249,218,32,8,137,183,216,182,125,155,76,185,198,152,237,91,182,111,223,2,224,165,145,20,224,154,107,62,121,103,30,77,126,62,73,
18,129,255,233,3,7,44,248,0,39,32,145,7,158,90,120,23,231,206,45,131,157,102,146,242,214,72,97,45,43,68,67,94,84,0,12,22,26,210,78,222,115,144,171,12,64,62,172,153,202,215,138,93,6,177,244,201,8,12,241,114,98,174,8,112,64,46,133,219,27,195,210,151,18,
136,145,168,136,192,86,137,50,35,116,192,146,68,49,140,128,55,32,173,165,77,43,227,21,0,169,206,16,252,175,40,20,214,207,93,134,137,137,9,156,57,115,122,172,25,55,63,54,146,2,108,222,188,121,238,178,13,155,239,75,211,148,246,222,124,11,126,107,255,126,
11,191,52,26,138,72,172,253,173,55,23,242,235,125,31,37,15,112,199,94,2,168,1,68,202,101,30,222,221,23,130,34,12,23,166,1,158,96,232,67,1,46,40,0,11,232,52,53,32,18,248,126,73,43,109,3,98,109,1,21,202,12,69,22,182,66,150,25,153,82,156,136,213,167,18,
0,103,2,216,40,3,69,202,41,0,73,127,129,195,126,10,54,54,6,145,149,199,233,211,167,161,117,54,59,82,12,48,49,53,247,89,165,212,166,110,174,65,191,123,219,109,96,55,79,19,188,229,179,188,64,191,159,224,141,215,223,70,154,100,18,53,15,33,228,106,4,30,14,
42,92,27,210,111,184,174,12,86,61,42,117,166,53,61,3,92,246,0,153,133,153,104,192,48,116,166,0,103,8,105,63,115,49,136,79,69,17,197,97,6,185,149,9,155,72,20,35,134,31,79,22,151,159,105,123,159,72,234,90,41,49,62,118,10,144,102,89,113,156,153,17,199,21,
116,218,109,41,83,164,186,35,41,64,173,90,185,201,70,252,187,118,125,18,211,211,51,114,16,33,16,200,41,1,67,92,210,59,111,159,66,146,164,98,249,107,241,221,52,2,172,32,52,132,199,48,227,29,194,116,80,119,194,8,194,96,3,113,231,226,202,181,241,129,43,
146,36,251,185,247,99,184,149,142,97,233,146,145,182,208,10,215,181,120,23,13,19,49,192,49,148,146,128,82,174,18,71,162,124,172,117,225,33,68,144,62,78,33,226,53,43,192,108,46,91,182,92,185,131,137,241,177,109,219,96,140,118,177,17,3,76,96,136,123,195,
217,179,75,56,127,110,89,44,127,36,161,50,155,209,71,221,41,98,128,55,26,44,208,154,212,106,212,7,176,17,107,5,105,169,10,0,157,153,64,178,44,33,248,5,129,220,110,161,114,75,58,178,185,214,232,245,251,178,49,150,166,140,85,238,193,100,169,88,125,154,
36,72,243,107,175,31,127,3,99,123,110,68,165,217,146,107,12,145,144,51,43,34,82,204,108,134,126,17,52,57,187,225,10,16,214,219,205,155,217,117,179,110,158,42,110,219,178,1,150,114,248,107,25,234,146,48,15,177,201,18,174,181,246,28,214,107,180,231,114,
249,122,112,226,67,96,146,130,146,157,75,217,253,4,194,126,7,8,1,50,32,171,8,57,229,59,125,102,1,199,142,205,227,135,47,254,0,243,243,175,96,122,114,10,141,203,54,96,106,231,46,252,239,11,47,226,208,115,207,226,57,155,14,253,55,14,29,125,13,47,28,123,
29,47,159,89,196,27,181,22,166,126,231,118,236,252,243,251,195,161,82,105,138,98,5,128,214,228,1,98,166,245,0,106,126,171,214,123,0,132,101,151,104,95,175,151,72,185,100,42,107,156,62,105,141,102,70,24,213,32,135,219,117,217,255,143,124,99,129,169,181,
118,219,211,74,202,89,150,0,128,88,236,242,242,18,22,23,223,197,241,227,63,65,154,183,55,154,77,108,252,200,38,252,199,19,223,197,131,255,248,0,86,123,43,200,210,68,86,80,105,150,2,48,50,111,199,113,148,123,222,95,197,190,125,191,137,204,0,215,254,213,
3,56,145,131,215,253,85,84,199,199,242,52,129,246,236,156,40,22,219,179,143,118,27,113,189,1,157,38,98,253,3,116,154,214,172,0,154,205,164,5,219,106,53,237,9,84,216,47,103,130,227,45,47,173,181,150,122,16,186,48,111,42,23,135,246,30,29,252,176,219,82,
49,103,6,104,208,123,187,107,90,103,216,184,113,19,250,201,42,190,252,79,95,178,48,36,78,74,210,62,136,72,174,51,107,196,238,240,231,142,59,62,135,110,119,2,87,95,179,19,183,175,172,96,97,225,29,204,204,204,200,53,165,72,192,55,26,178,101,14,2,203,198,
209,226,187,11,56,181,240,83,24,102,240,150,77,176,146,16,97,49,255,255,127,123,228,17,108,221,250,81,123,32,7,57,72,90,93,25,193,247,13,81,0,214,220,96,102,57,243,86,74,57,183,82,180,93,173,253,170,192,115,90,219,90,123,148,104,174,184,55,227,235,92,
92,187,5,98,131,45,219,23,125,63,66,136,3,124,30,40,131,194,62,135,171,43,16,21,218,228,247,95,182,97,3,254,232,143,255,4,47,191,252,146,204,221,147,19,147,24,31,239,10,120,69,132,90,163,238,142,112,149,224,56,118,244,21,152,76,99,211,198,245,216,188,
105,61,88,60,72,22,142,148,77,130,213,229,190,140,235,121,230,194,214,179,23,127,138,56,61,209,193,87,191,242,101,252,232,135,47,224,174,123,238,65,167,51,38,247,26,64,127,68,5,80,236,135,200,31,170,4,40,114,137,133,10,13,0,87,12,179,6,130,26,174,47,
225,111,241,194,176,58,21,159,79,142,106,113,243,169,184,227,40,243,179,83,104,127,170,8,102,233,163,51,141,52,237,75,59,152,45,52,119,242,151,137,129,92,253,137,237,208,70,67,59,175,8,2,140,201,144,246,150,144,172,202,88,129,3,76,36,9,68,138,128,203,
113,196,0,145,103,236,184,114,91,30,47,28,199,243,135,14,201,231,99,119,221,117,183,76,49,70,107,240,133,124,21,76,185,124,116,219,199,149,175,135,160,130,75,148,132,71,192,29,214,247,3,193,18,104,148,165,152,40,76,121,207,128,60,188,50,88,80,176,112,
191,159,46,123,227,198,29,72,177,83,94,99,180,212,181,209,2,43,203,18,255,61,128,88,51,187,19,72,10,223,46,56,56,238,181,2,61,244,123,63,23,166,123,183,139,43,4,96,211,166,143,224,199,63,62,130,87,143,204,227,241,199,31,199,129,223,62,16,6,82,132,223,
147,7,80,12,246,92,195,143,231,128,73,172,68,242,17,54,108,6,110,252,112,0,7,15,182,96,157,65,205,216,56,24,90,234,2,17,206,82,221,188,155,101,169,192,35,130,148,13,107,144,235,27,32,21,62,13,43,29,12,177,118,239,48,192,34,137,240,11,23,121,191,114,94,
40,143,143,117,16,71,177,96,121,229,229,87,112,213,85,87,97,203,214,45,18,159,13,88,178,140,126,26,200,133,147,52,14,10,38,102,48,234,234,93,80,123,69,18,11,131,75,150,41,11,80,11,19,222,213,10,64,233,67,182,110,225,26,4,136,22,116,240,29,204,236,97,
6,112,14,177,82,101,203,116,242,1,194,44,139,255,150,48,114,31,161,184,207,198,10,201,127,107,177,97,195,229,248,193,161,31,57,207,197,152,159,159,23,5,0,95,72,16,24,196,187,203,224,78,41,160,14,78,1,33,144,26,204,221,125,31,144,8,68,9,122,56,147,57,
19,4,40,10,234,90,90,86,138,4,175,64,1,36,136,148,47,189,175,80,153,185,12,115,240,167,223,2,205,129,180,80,45,64,73,254,35,83,127,189,234,190,81,180,185,131,47,201,221,167,164,180,103,207,46,98,188,59,129,149,229,101,59,166,246,236,95,118,34,139,187,
22,23,234,1,12,195,199,128,254,15,147,252,29,190,116,147,224,42,67,150,174,192,152,62,152,117,33,22,140,99,26,178,76,165,247,213,58,203,110,22,1,102,0,234,225,148,96,6,160,146,60,76,155,108,189,96,221,23,67,36,224,100,14,39,130,46,8,149,251,179,112,187,
8,10,224,172,223,3,103,16,20,139,98,12,89,232,19,180,94,69,150,45,217,206,5,192,68,31,168,171,45,88,212,207,88,96,1,88,112,193,101,152,222,58,253,125,62,40,33,69,126,169,238,55,167,16,69,202,129,184,80,5,8,65,160,36,31,93,27,67,146,15,94,226,17,140,192,
63,231,193,95,92,87,27,196,3,144,228,96,149,172,211,185,214,146,149,250,178,183,78,159,126,121,132,160,136,68,9,96,92,89,80,4,60,124,49,166,0,163,228,142,5,230,134,49,0,44,129,57,17,203,31,96,153,165,242,32,87,43,64,67,224,83,154,35,125,10,32,3,76,111,
157,255,175,133,196,245,67,81,4,86,198,47,153,3,248,11,159,2,188,245,155,130,107,23,225,242,20,224,151,102,105,186,8,64,67,169,40,192,40,70,183,1,102,49,32,42,1,117,32,189,165,255,31,123,231,218,43,55,110,131,97,82,211,11,80,180,31,246,83,139,69,246,
255,255,188,2,219,236,73,130,100,248,20,103,64,144,16,21,91,153,218,29,163,93,241,96,96,217,25,200,193,188,20,111,34,41,233,104,81,74,0,218,251,184,243,253,240,241,49,9,144,149,48,221,230,171,129,143,210,3,48,67,126,250,233,175,242,243,207,31,58,128,
19,196,182,192,60,87,0,68,61,33,106,206,8,146,129,187,227,110,96,110,255,2,233,250,111,216,24,134,201,135,15,255,144,95,126,249,187,188,132,22,69,49,169,210,68,181,21,21,192,113,35,208,12,105,141,8,252,224,6,0,216,16,163,191,181,247,226,134,191,200,162,
87,26,129,225,5,164,84,13,147,237,112,36,176,120,1,116,133,19,157,225,15,242,238,126,60,42,86,94,72,75,7,68,110,224,131,17,28,120,78,114,3,93,161,100,165,171,166,222,71,10,17,91,166,175,164,133,255,163,150,208,67,228,42,8,189,23,160,7,109,0,3,105,198,
16,90,4,203,157,39,69,46,161,69,81,199,136,62,154,83,20,21,192,17,21,160,69,5,228,99,33,189,64,226,209,235,105,145,166,23,224,81,193,14,115,78,138,4,90,41,235,82,45,65,29,185,132,22,169,123,1,174,251,91,26,100,130,156,228,6,154,89,88,153,41,0,212,239,
137,125,115,144,107,104,217,0,110,252,33,218,218,144,176,195,89,18,64,138,113,145,94,64,130,207,171,165,193,162,136,182,138,240,126,117,12,56,28,7,232,210,170,104,150,200,14,25,53,215,211,50,2,111,130,224,54,0,34,4,248,255,121,40,88,55,66,193,224,110,
32,140,25,125,240,74,93,176,72,53,66,235,128,123,1,117,123,92,207,8,4,121,215,14,205,201,12,18,254,146,212,241,106,90,54,64,6,130,168,235,16,142,165,132,25,136,90,153,181,42,126,21,225,50,43,96,185,129,55,87,1,170,45,49,8,63,224,112,62,128,9,173,13,89,
180,192,232,50,188,122,253,47,138,230,86,120,63,130,110,25,114,114,70,80,16,8,150,247,23,173,255,69,154,94,0,238,6,66,225,128,195,18,0,151,2,97,80,16,77,137,122,186,0,253,133,127,49,2,53,157,64,137,100,222,163,54,128,137,154,62,198,25,248,161,187,231,
34,224,23,165,23,128,72,92,165,219,187,225,96,62,0,136,74,118,175,16,69,12,17,177,90,234,135,92,65,75,5,168,219,0,146,219,193,89,155,119,80,5,168,184,251,71,54,75,38,154,65,150,250,189,11,104,225,239,157,201,111,17,20,226,241,167,161,2,132,3,113,128,
208,255,173,19,243,93,62,0,151,11,128,21,9,188,181,22,99,45,88,28,85,1,209,170,181,134,125,64,98,172,16,158,231,43,105,145,250,110,224,45,12,194,62,75,139,51,210,194,77,64,251,54,176,238,12,32,42,122,165,20,88,248,123,170,125,235,155,119,194,105,167,
134,69,36,48,209,197,135,26,250,255,74,90,54,64,147,118,111,177,51,40,148,13,187,83,42,131,20,17,44,192,214,100,64,127,223,197,180,54,131,156,1,220,93,71,79,73,10,205,220,63,154,152,136,75,130,108,202,156,165,249,215,108,15,47,114,47,224,102,209,193,
60,115,52,229,120,117,48,32,64,244,198,33,158,171,180,177,237,231,245,70,224,242,2,18,255,64,228,36,27,0,200,178,127,65,76,155,220,106,71,69,84,94,75,203,6,184,105,147,123,48,192,173,131,29,78,81,1,68,121,152,160,162,30,9,212,150,139,255,250,244,208,
101,3,120,84,208,81,215,64,226,68,35,16,17,69,176,40,3,22,218,216,10,250,2,90,57,129,55,11,55,144,82,217,45,112,226,118,176,137,168,75,250,155,244,221,67,241,191,215,211,114,3,111,214,98,107,56,122,18,158,81,28,138,91,247,24,67,201,145,117,113,1,189,
68,3,44,210,44,13,19,63,109,68,200,212,253,195,42,0,79,9,163,51,2,11,214,151,35,191,18,66,148,40,18,113,163,76,16,50,131,239,168,13,128,154,24,62,153,139,0,34,238,124,165,17,184,84,128,222,154,52,107,113,100,110,143,130,143,244,96,32,200,112,235,18,141,
20,131,134,245,73,161,92,101,4,174,156,64,110,45,54,134,0,209,179,106,3,193,227,0,248,13,132,219,7,90,90,66,35,87,210,10,5,63,198,197,36,59,28,8,66,48,17,212,226,200,24,24,211,205,225,202,106,161,213,34,166,233,77,164,61,198,130,32,138,158,213,43,88,
5,200,79,242,133,160,4,83,92,45,250,87,82,40,222,254,190,15,201,115,78,135,144,210,46,221,153,194,186,194,16,46,73,12,93,228,7,92,147,29,215,195,89,59,26,7,72,242,132,144,152,12,159,119,40,13,123,53,19,44,210,148,0,126,234,88,174,255,24,113,180,69,140,
72,35,155,68,209,181,8,169,149,129,200,127,147,22,213,34,237,158,1,18,239,227,94,64,6,20,12,143,8,246,53,1,6,197,5,228,56,252,11,220,145,168,203,172,36,100,165,13,224,21,91,189,116,134,51,186,133,83,197,62,146,248,19,204,50,103,186,69,148,65,0,57,89,
180,200,216,0,26,247,253,105,57,153,97,18,116,78,82,104,126,28,231,184,31,141,128,223,47,168,186,183,146,153,255,27,91,64,111,252,188,32,81,12,2,228,51,177,58,245,25,13,34,18,112,205,55,37,254,191,35,241,207,198,129,147,63,170,122,217,16,235,123,233,
252,140,239,206,215,183,38,138,91,102,70,78,126,70,139,152,100,128,156,152,192,159,254,64,191,168,73,249,63,211,195,76,68,56,227,4,115,6,136,241,94,155,189,17,63,122,149,129,119,11,199,11,66,76,74,172,134,179,154,69,151,217,64,250,251,255,89,3,107,246,
232,73,112,171,58,220,0,184,74,14,70,140,133,173,22,47,228,86,61,230,153,192,226,249,0,98,34,182,189,154,159,183,1,200,15,12,45,228,251,51,2,185,62,22,192,65,128,25,39,25,1,100,255,221,80,56,97,3,124,240,91,106,74,173,118,81,215,26,111,129,56,42,38,84,
64,243,148,125,235,14,237,60,173,63,0,241,41,158,65,114,128,15,133,151,128,155,55,58,7,164,18,60,35,29,114,200,142,123,54,138,114,221,212,25,56,250,241,132,222,130,162,78,236,151,122,85,19,1,113,47,64,68,85,59,156,56,47,41,180,70,148,212,135,196,80,79,
182,166,41,128,233,214,119,40,207,201,154,5,246,220,47,205,185,19,174,185,30,78,208,50,53,14,230,76,34,5,224,250,2,54,36,209,182,247,144,0,171,54,241,156,80,49,213,65,161,32,28,222,11,240,75,117,13,199,172,96,166,0,207,17,71,246,193,67,183,117,177,201,
118,159,124,182,116,249,132,89,156,10,144,89,43,9,63,230,239,51,53,8,199,9,216,249,190,42,98,162,15,85,208,76,69,30,87,19,164,168,227,243,2,65,212,84,241,68,68,199,183,49,136,234,39,245,52,59,18,233,9,139,187,227,26,209,238,82,131,49,35,103,142,39,111,
80,81,101,135,193,116,14,240,28,244,241,6,31,199,33,17,218,228,253,98,90,101,217,89,42,224,135,2,32,59,46,40,213,0,154,138,255,185,37,189,99,152,49,204,90,222,73,209,201,134,84,162,188,124,91,29,108,26,139,251,210,129,1,248,92,75,117,206,242,195,225,
204,105,97,3,224,103,31,55,127,239,209,226,208,74,140,18,32,111,251,84,49,136,235,116,101,87,224,236,73,38,164,72,152,2,66,112,27,154,104,177,195,181,5,151,252,174,237,232,98,114,204,68,252,111,188,39,1,54,50,155,183,246,102,150,113,69,17,5,58,234,146,
160,152,164,7,140,192,57,37,246,62,232,192,170,17,175,138,247,40,138,39,70,91,125,128,35,68,23,25,41,22,121,149,56,140,134,37,236,139,106,108,148,62,108,129,201,140,81,136,227,118,70,143,6,161,252,104,204,2,66,162,209,28,82,85,165,137,10,228,187,120,
198,13,60,30,8,207,151,90,17,127,182,169,207,235,18,118,96,247,172,100,190,95,144,138,109,51,16,59,210,134,184,169,120,228,152,17,100,161,176,54,168,223,82,153,169,7,212,248,190,157,192,134,250,99,59,208,100,70,172,252,199,181,237,252,198,231,51,0,5,
253,240,22,122,61,52,253,15,37,232,2,155,106,99,44,123,103,215,85,171,4,243,103,85,140,195,190,196,170,98,25,7,242,25,151,14,123,202,131,232,188,47,51,203,195,35,51,91,75,128,227,54,192,156,234,106,73,221,111,254,137,21,172,163,140,77,142,102,4,251,73,
191,24,190,31,173,227,73,166,128,106,122,57,77,12,59,102,54,4,59,118,208,76,189,236,108,183,219,221,164,165,4,152,244,105,56,155,1,200,232,75,82,130,15,36,8,176,237,250,88,60,27,117,241,124,5,207,227,7,108,75,32,2,157,10,0,115,127,125,235,89,189,183,
41,243,205,99,2,194,200,56,168,96,95,59,21,128,17,106,97,148,0,232,185,12,80,137,126,159,218,158,114,153,246,34,123,7,12,174,80,49,163,99,72,121,33,243,57,231,123,250,19,128,245,187,64,83,212,33,179,216,129,203,255,175,194,253,155,104,123,128,255,184,
126,249,252,69,192,68,181,137,138,202,183,111,119,249,242,229,179,51,132,126,22,17,61,149,1,18,164,124,80,251,213,179,225,255,51,17,137,193,247,166,147,224,8,147,149,57,130,108,9,198,28,228,137,125,1,63,14,50,162,27,18,198,9,38,192,231,3,190,190,117,
41,249,128,188,253,246,22,81,74,85,145,111,223,190,202,167,79,159,229,157,184,219,219,233,18,160,90,227,8,98,161,6,138,171,184,103,165,215,12,139,10,27,189,197,95,25,106,174,95,119,54,86,38,162,92,167,209,185,62,11,194,246,0,22,74,188,226,9,134,67,210,
133,252,250,81,196,238,222,29,28,105,173,201,111,255,250,40,159,222,62,7,26,210,154,188,189,189,201,199,143,191,10,32,247,251,253,159,103,75,128,164,178,85,108,212,144,237,134,104,70,42,141,34,176,142,246,12,50,242,50,215,215,91,25,61,14,104,47,45,74,
193,133,214,137,230,134,105,29,51,83,39,149,254,77,222,185,245,198,117,85,113,124,29,207,197,51,190,54,117,147,218,142,147,198,197,105,82,80,81,145,90,90,81,9,158,16,15,124,4,36,158,120,226,251,240,45,144,120,64,2,212,132,242,128,144,42,160,34,144,170,
52,105,218,52,33,113,198,158,171,231,220,47,115,134,255,254,107,207,44,141,182,198,29,35,71,121,192,213,234,62,231,100,206,36,158,223,250,175,219,108,143,61,134,252,113,30,138,87,230,19,248,12,253,121,150,75,251,168,195,174,128,225,222,78,8,219,237,35,
56,65,8,22,101,191,221,63,254,74,68,42,207,97,16,100,252,95,183,36,151,165,53,199,189,169,20,85,186,194,86,26,139,228,120,85,255,130,221,131,91,71,40,4,173,176,93,248,10,21,215,156,150,111,145,121,190,190,91,232,116,204,186,184,160,221,8,3,181,143,139,
20,102,195,62,224,226,58,97,143,144,231,91,79,143,152,255,225,20,250,44,120,204,151,95,62,160,83,228,121,254,96,208,233,60,123,14,17,64,157,64,79,173,149,250,158,41,65,187,25,241,127,123,83,196,109,7,149,215,169,247,56,91,43,212,9,230,245,246,186,243,
217,157,48,186,95,110,4,112,135,59,162,27,250,184,170,35,194,12,44,208,198,90,32,194,231,56,6,120,172,30,86,144,35,96,22,120,34,132,159,166,169,180,159,117,36,73,18,40,94,85,81,169,84,165,211,105,203,39,159,252,85,170,213,154,116,59,237,143,69,36,134,
149,207,171,11,32,100,26,35,0,210,128,78,83,78,87,241,34,125,179,30,184,93,193,12,83,71,197,186,95,222,81,190,101,240,77,133,169,231,76,53,21,220,92,25,19,46,87,44,250,188,0,60,2,208,81,145,153,99,130,30,229,230,184,224,49,85,45,48,79,8,116,137,192,43,
226,85,38,224,61,42,58,203,10,9,195,72,252,19,159,179,0,164,129,169,168,16,250,121,124,235,214,239,196,247,135,230,90,247,240,240,241,159,9,255,156,29,128,192,116,198,163,57,83,71,193,186,58,227,207,210,5,175,125,179,82,157,249,115,235,96,158,123,157,
52,181,239,157,153,65,204,223,111,80,46,62,44,114,31,56,25,191,194,244,177,12,215,128,204,10,28,112,185,22,121,42,69,150,2,124,46,37,12,28,236,70,14,2,179,31,246,104,206,43,54,140,47,81,12,5,224,226,249,8,25,69,28,195,125,150,230,204,249,37,219,61,15,
166,34,51,231,21,60,215,71,127,186,37,119,238,252,93,106,181,154,252,231,201,163,223,6,65,240,181,136,100,176,209,185,119,1,182,2,176,212,52,255,235,88,244,244,225,143,91,109,115,117,165,109,57,114,157,1,172,164,78,5,232,125,99,109,225,222,111,127,222,
142,235,210,204,12,158,144,51,64,205,146,68,8,24,176,227,56,148,60,137,0,189,32,56,171,102,3,149,96,42,0,60,129,77,112,4,109,250,245,82,196,216,24,17,193,64,135,141,74,174,82,234,239,103,210,224,66,240,179,221,82,181,90,165,0,254,248,209,135,114,251,
246,239,165,94,95,150,227,227,214,199,95,127,245,197,135,34,18,193,18,8,228,124,29,64,71,189,10,142,134,11,37,229,176,120,79,173,217,98,236,22,106,222,226,187,119,220,212,48,231,93,61,165,60,29,166,96,153,132,124,62,62,207,19,64,206,36,141,99,9,130,1,
97,231,6,122,10,35,232,156,160,121,175,49,3,185,66,216,80,115,85,168,106,207,28,83,213,20,7,67,127,49,166,24,199,60,231,236,222,169,63,136,215,66,150,217,197,128,166,236,168,248,42,29,75,142,142,158,201,173,219,127,144,187,119,239,72,125,25,240,219,71,
119,239,125,254,233,175,69,228,8,54,128,101,207,109,18,168,96,248,205,168,215,186,21,237,233,227,90,239,148,113,177,183,192,6,17,135,174,246,207,19,3,19,30,150,132,44,84,114,18,196,18,133,161,68,193,80,226,48,144,36,137,37,129,154,67,127,8,200,25,66,
48,243,51,65,46,81,197,132,108,173,106,225,87,121,14,37,18,8,67,60,204,27,3,126,225,217,118,82,195,226,12,81,226,228,255,157,119,158,236,140,223,58,153,126,40,164,137,66,81,20,200,211,175,158,200,189,123,159,201,167,119,255,41,126,224,75,173,94,151,163,
214,211,127,125,113,255,223,191,65,189,96,90,191,22,204,135,229,231,230,0,84,201,156,29,65,37,109,236,168,121,161,25,122,185,216,14,26,13,46,106,250,66,25,72,211,218,143,170,67,209,101,90,33,137,88,56,245,196,31,14,36,24,158,72,28,199,0,238,75,28,5,204,
171,98,243,42,149,203,176,77,168,106,128,91,67,85,93,69,110,173,215,234,184,70,216,170,120,134,102,24,81,235,14,85,237,54,157,215,107,86,225,51,159,252,233,49,90,20,200,253,69,150,75,8,199,28,12,250,210,237,118,164,63,232,73,175,219,149,214,209,161,244,
251,61,56,195,136,213,62,86,255,203,7,247,254,118,248,244,241,95,68,228,62,236,17,172,13,139,33,204,242,220,35,128,170,145,198,188,133,252,167,123,219,23,128,73,91,84,205,12,123,98,224,216,149,247,201,8,144,89,112,65,169,81,16,162,237,57,2,232,190,156,
12,6,226,3,116,18,5,236,147,179,36,230,99,240,90,88,53,171,146,241,2,78,21,93,175,215,164,6,192,203,245,134,44,47,55,120,12,101,207,168,219,42,83,247,14,104,47,228,76,254,128,82,117,78,200,48,166,6,122,169,16,114,81,176,173,27,194,57,209,194,209,186,
189,14,39,121,190,31,64,237,33,219,189,209,168,160,163,208,132,98,203,241,103,104,243,143,31,182,143,91,159,35,101,25,240,15,97,95,192,158,194,134,96,145,159,101,63,128,135,226,52,196,42,73,202,191,16,106,168,47,180,41,176,132,183,134,67,95,214,54,95,
146,114,129,159,142,225,185,171,100,205,203,0,92,241,180,62,64,21,204,240,28,133,177,4,8,207,253,222,177,244,218,109,172,93,9,17,190,179,52,1,236,72,82,172,165,129,12,80,86,205,60,174,86,141,138,13,220,101,40,25,160,1,183,217,92,145,102,163,41,43,43,
171,84,81,181,82,5,112,58,195,180,245,114,135,64,250,217,201,60,214,223,163,48,205,205,226,132,236,82,70,128,12,64,0,122,2,53,15,160,226,182,180,219,199,50,56,233,83,225,81,20,177,144,204,178,124,58,226,213,253,254,134,53,146,81,94,164,73,18,249,120,
252,0,206,49,8,163,160,139,244,101,84,222,177,225,254,145,117,128,67,216,137,230,254,51,56,64,154,102,125,243,151,33,108,86,146,36,101,69,57,118,37,169,237,151,58,1,6,19,45,121,101,247,178,134,243,121,123,230,173,138,172,146,185,150,44,188,114,22,91,
177,49,40,183,115,212,146,206,241,177,12,7,61,170,97,8,85,39,113,196,10,28,106,32,15,64,38,44,91,20,49,76,47,3,114,21,202,173,195,86,87,87,1,218,88,83,26,128,142,60,105,30,67,101,47,81,209,243,62,34,183,180,78,57,147,180,173,2,39,107,101,10,10,78,199,
194,48,77,50,243,111,36,212,94,175,75,200,61,163,102,156,135,80,114,24,4,146,229,25,5,99,195,62,33,195,73,12,228,2,75,145,231,89,132,231,8,162,56,14,224,20,1,82,84,132,239,57,74,64,31,161,158,85,189,29,238,4,182,200,59,38,116,154,116,38,121,127,140,175,
179,58,192,18,242,204,227,237,157,237,110,158,101,151,76,190,220,132,162,129,103,78,0,176,74,176,237,206,73,175,39,237,195,67,185,180,183,55,205,213,75,90,135,153,47,182,61,248,94,140,146,9,249,4,121,172,219,57,150,227,103,135,50,48,160,125,170,217,152,
246,188,74,130,97,24,160,141,99,218,16,93,227,186,182,186,78,216,107,107,235,178,2,224,8,231,112,130,10,87,79,251,184,25,103,230,115,187,5,197,100,218,54,53,230,247,10,115,14,123,242,52,75,89,67,164,105,108,114,51,33,35,12,19,120,96,0,103,236,32,204,
99,103,212,92,150,116,172,28,16,11,56,11,178,82,26,82,209,81,56,76,0,26,247,68,176,24,206,29,83,189,106,57,44,133,37,214,66,11,121,8,235,171,241,60,113,194,254,89,28,96,56,236,118,16,170,30,54,26,205,75,166,189,184,114,117,127,209,221,161,180,71,247,
145,134,0,169,100,31,188,196,42,122,136,48,215,235,66,9,157,14,195,246,9,138,49,132,46,66,70,254,163,154,21,178,55,85,70,13,45,77,13,0,161,90,42,118,99,125,131,128,161,104,192,94,163,162,43,85,91,172,49,148,232,174,101,237,219,57,158,114,106,9,85,243,
228,183,111,105,110,71,1,70,149,34,222,50,165,12,81,75,116,186,109,2,238,117,59,12,219,80,35,33,3,164,166,28,171,102,134,107,80,196,127,8,106,41,2,90,140,176,29,14,227,40,12,146,52,13,178,60,77,138,44,163,138,39,128,21,182,130,182,199,177,154,85,190,
90,8,139,236,113,10,43,156,130,239,140,14,80,194,146,32,244,63,193,11,252,222,195,135,15,228,250,27,111,202,198,198,38,189,217,249,140,0,111,54,30,128,28,115,221,253,59,255,144,251,15,62,147,86,235,41,239,131,183,115,213,28,137,149,203,18,225,53,26,13,
88,147,6,101,51,55,175,175,109,32,55,175,176,24,67,126,166,234,171,0,45,186,227,133,230,217,143,178,41,198,197,4,47,87,45,210,180,248,242,8,73,115,43,139,175,36,54,45,20,71,167,248,190,229,196,40,26,69,88,127,208,21,240,18,16,164,129,39,159,84,213,60,
130,159,148,25,8,67,47,105,108,194,52,162,66,136,168,237,27,224,112,156,24,244,19,60,102,2,50,155,133,172,160,103,192,234,121,198,85,239,205,117,157,49,3,166,212,112,191,184,121,122,207,84,17,53,44,23,155,205,245,247,222,250,238,219,191,66,120,221,217,
217,217,147,31,254,232,199,124,1,169,38,17,170,243,194,198,150,176,88,115,230,224,84,22,85,244,172,245,4,67,137,22,149,34,58,181,2,100,86,217,0,188,38,171,107,107,178,210,88,97,81,134,66,141,74,210,25,254,100,172,168,197,152,166,228,105,111,165,33,123,
2,153,138,230,35,237,252,60,19,20,76,76,47,4,13,224,93,171,104,83,121,71,113,68,103,208,239,143,174,106,91,218,178,48,144,161,244,24,164,99,83,133,197,204,207,209,48,70,139,145,167,105,4,200,19,88,185,11,90,1,207,172,106,233,28,200,133,154,16,178,181,
241,60,224,231,224,0,76,150,47,195,246,247,246,174,252,252,218,254,141,95,194,243,151,222,184,241,166,188,243,206,7,86,121,37,215,205,245,151,80,100,45,43,24,199,15,56,155,38,191,146,83,72,79,65,81,137,132,74,190,132,109,103,194,90,83,235,162,109,148,
222,95,97,167,80,153,228,117,2,68,225,68,192,44,184,96,253,126,151,237,212,9,66,54,174,113,138,199,72,166,225,223,182,173,64,56,26,101,25,104,102,105,102,148,107,196,28,4,152,14,33,128,251,73,26,71,163,98,110,94,78,93,208,122,236,64,166,41,100,85,49,
204,5,61,62,29,244,249,59,128,97,180,10,187,10,251,246,183,14,110,252,226,242,229,171,63,65,144,147,131,235,55,229,157,119,127,192,162,11,138,128,130,151,233,4,58,111,87,94,90,62,187,142,65,148,174,179,232,185,66,182,173,156,22,112,229,168,100,78,134,
154,153,151,1,151,189,62,66,56,149,140,107,108,21,39,197,151,14,88,188,73,165,157,131,50,32,199,40,190,82,3,54,206,160,96,40,217,71,196,14,209,139,199,115,96,101,154,143,221,188,236,66,86,53,171,138,53,92,115,61,35,228,231,239,0,234,4,117,44,91,176,55,
96,111,29,92,127,243,103,187,59,123,239,231,69,46,175,190,186,35,111,127,239,93,185,116,105,155,170,107,54,208,94,45,55,121,236,138,86,47,120,115,170,108,17,194,129,85,120,110,213,204,2,44,182,106,134,138,161,224,1,243,51,206,89,128,177,223,207,82,125,
87,76,96,90,27,140,76,31,101,40,131,103,144,196,73,136,28,205,252,204,243,36,9,33,119,39,183,158,57,100,211,220,124,124,14,33,251,69,59,0,211,192,10,108,23,118,19,246,157,253,253,131,159,238,94,190,242,62,127,83,29,20,121,229,234,53,121,125,255,186,92,
132,35,92,216,220,98,53,206,119,178,198,165,3,92,135,34,250,163,76,165,157,26,34,175,50,52,15,208,10,246,109,175,111,64,19,120,224,83,237,12,217,236,40,180,54,224,54,199,114,12,206,105,6,192,44,186,0,60,1,224,48,78,226,32,3,100,211,82,41,36,183,0,115,
0,207,135,204,251,84,197,78,94,30,157,23,228,23,239,0,234,4,85,44,235,176,43,176,27,176,235,91,91,175,124,255,181,107,7,31,160,59,120,5,80,76,33,200,25,193,214,214,69,185,118,237,64,118,119,174,160,255,94,225,117,246,255,118,252,151,143,10,78,184,130,
192,228,228,14,12,99,218,97,79,208,22,9,192,193,18,129,96,233,20,184,87,247,233,81,49,227,2,95,16,48,52,31,197,67,136,24,10,142,208,47,51,79,71,38,122,227,182,120,14,104,109,163,220,188,156,206,41,192,96,10,249,5,228,229,23,236,0,110,42,216,132,237,193,
14,96,223,130,252,95,191,120,113,231,230,246,246,238,13,84,239,91,0,86,25,149,204,183,136,2,77,227,0,28,188,232,246,41,86,224,2,157,178,110,64,232,213,207,182,215,86,174,192,245,194,20,95,128,235,155,233,23,68,12,208,105,88,228,184,6,202,238,96,132,70,
112,78,184,86,192,92,213,220,226,139,230,66,46,23,129,252,255,224,0,134,97,29,182,1,219,134,189,6,219,231,49,108,99,227,194,238,198,75,155,175,94,216,124,121,187,209,92,217,64,143,190,140,97,74,21,183,205,110,21,43,25,25,11,164,8,24,144,178,232,138,253,
8,131,17,68,128,40,207,141,154,211,40,197,117,11,209,5,13,115,194,245,226,5,152,27,178,85,201,229,127,219,53,155,85,133,97,32,140,106,157,154,27,154,136,18,23,138,239,255,140,218,250,83,191,194,192,20,99,103,161,72,47,100,6,206,34,237,114,78,134,47,33,
139,130,75,4,208,37,168,65,3,18,56,130,19,75,144,88,142,72,68,209,57,31,156,247,129,32,193,232,13,127,63,204,239,225,88,133,115,116,219,97,49,145,178,91,61,128,201,63,173,201,223,143,108,19,64,203,4,127,32,128,29,216,131,196,108,249,187,103,89,86,227,
87,126,146,140,149,221,172,164,236,60,128,201,78,254,197,200,54,1,244,105,64,192,129,134,137,76,224,245,26,208,139,0,210,124,105,112,151,237,102,225,62,53,178,231,106,180,9,144,139,80,129,154,27,238,70,208,187,9,192,92,231,190,253,50,116,1,62,150,33,
67,170,103,30,255,183,201,38,128,81,40,21,40,178,12,19,192,48,1,172,158,81,206,35,76,185,167,77,30,0,0,0,0,73,69,78,68,174,66,96,130,0,0 };

const char* window_png = (const char*) temp_ed1ceeb0;

//================== AudioPluginXCodeScript.txt ==================
static const unsigned char temp_cf5492ee[] =
"\r\n"
"# This script takes the build product and copies it to the AU, VST, and RTAS folders, depending on \r\n"
"# which plugin types you've built\r\n"
"\r\n"
"original=$CONFIGURATION_BUILD_DIR/$FULL_PRODUCT_NAME\r\n"
"\r\n"
"# this looks inside the binary to detect which platforms are needed.. \r\n"
"copyAU=`nm -g \"$CONFIGURATION_BUILD_DIR/$EXECUTABLE_PATH\" | grep -i 'AudioUnit' | wc -l`\r\n"
"copyVST=`nm -g \"$CONFIGURATION_BUILD_DIR/$EXECUTABLE_PATH\" | grep -i 'VSTPlugin' | wc -l`\r\n"
"copyRTAS=`nm -g \"$CONFIGURATION_BUILD_DIR/$EXECUTABLE_PATH\" | grep -i 'CProcess' | wc -l`\r\n"
"copyAAX=`nm -g \"$CONFIGURATION_BUILD_DIR/$EXECUTABLE_PATH\" | grep -i 'ACFStartup' | wc -l`\r\n"
"\r\n"
"if [ $copyAU -gt 0 ]; then\r\n"
"  echo \"Copying to AudioUnit folder...\"\r\n"
"  AU=~/Library/Audio/Plug-Ins/Components/$PRODUCT_NAME.component\r\n"
"  if [ -d \"$AU\" ]; then \r\n"
"    rm -r \"$AU\"\r\n"
"  fi\r\n"
"\r\n"
"  cp -r \"$original\" \"$AU\"\r\n"
"  sed -i \"\" -e 's/TDMwPTul/BNDLPTul/g' \"$AU/Contents/PkgInfo\"\r\n"
"  sed -i \"\" -e 's/TDMw/BNDL/g' \"$AU/Contents/$INFOPLIST_FILE\"\r\n"
"fi\r\n"
"\r\n"
"if [ $copyVST -gt 0 ]; then\r\n"
"  echo \"Copying to VST folder...\"\r\n"
"  VST=~/Library/Audio/Plug-Ins/VST/$PRODUCT_NAME.vst\r\n"
"  if [ -d \"$VST\" ]; then \r\n"
"    rm -r \"$VST\"\r\n"
"  fi\r\n"
"\r\n"
"  cp -r \"$original\" \"$VST\"\r\n"
"  sed -i \"\" -e 's/TDMwPTul/BNDLPTul/g' \"$VST/Contents/PkgInfo\"\r\n"
"  sed -i \"\" -e 's/TDMw/BNDL/g' \"$VST/Contents/$INFOPLIST_FILE\"\r\n"
"fi\r\n"
"\r\n"
"if [ $copyRTAS -gt 0 ]; then\r\n"
"  echo \"Copying to RTAS folder...\"\r\n"
"  RTAS=/Library/Application\\ Support/Digidesign/Plug-Ins/$PRODUCT_NAME.dpm\r\n"
"  if [ -d \"$RTAS\" ]; then\r\n"
"    rm -r \"$RTAS\"\r\n"
"  fi\r\n"
"\r\n"
"  cp -r \"$original\" \"$RTAS\"\r\n"
"fi\r\n"
"\r\n"
"if [ $copyAAX -gt 0 ]; then\r\n"
"  echo \"Copying to AAX folder...\"\r\n"
"\r\n"
"  if [ -d \"/Applications/ProTools_3PDev/Plug-Ins\" ]; then\r\n"
"    AAX1=\"/Applications/ProTools_3PDev/Plug-Ins/$PRODUCT_NAME.aaxplugin\"\r\n"
"\r\n"
"    if [ -d \"$AAX1\" ]; then\r\n"
"      rm -r \"$AAX1\"\r\n"
"    fi\r\n"
"\r\n"
"    cp -r \"$original\" \"$AAX1\"\r\n"
"  fi\r\n"
"\r\n"
"  if [ -d \"/Library/Application Support/Avid/Audio/Plug-Ins\" ]; then\r\n"
"    AAX2=\"/Library/Application Support/Avid/Audio/Plug-Ins/$PRODUCT_NAME.aaxplugin\"\r\n"
"\r\n"
"    if [ -d \"$AAX2\" ]; then\r\n"
"      rm -r \"$AAX2\"\r\n"
"    fi\r\n"
"\r\n"
"    cp -r \"$original\" \"$AAX2\"\r\n"
"  fi\r\n"
"fi\r\n";

const char* AudioPluginXCodeScript_txt = (const char*) temp_cf5492ee;

//================== background_tile.png ==================
static const unsigned char temp_24b16cf5[] =
{ 137,80,78,71,13,10,26,10,0,0,0,13,73,72,68,82,0,0,0,7,0,0,0,7,8,6,0,0,0,196,82,87,211,0,0,0,94,73,68,65,84,120,218,85,141,73,14,0,33,8,4,253,137,226,18,19,245,234,255,127,70,75,155,232,56,135,10,132,94,112,33,4,37,222,123,205,57,107,74,105,239,196,137,
8,72,239,29,99,12,204,57,209,90,227,237,19,45,113,161,209,12,234,172,18,49,70,88,229,134,34,103,173,245,159,60,134,82,10,238,79,166,223,106,238,91,100,229,73,191,80,92,47,179,68,223,148,158,98,226,0,0,0,0,73,69,78,68,174,66,96,130,0,0 };

const char* background_tile_png = (const char*) temp_24b16cf5;

//================== colourscheme_dark.xml ==================
static const unsigned char temp_8d0c8f08[] =
"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n"
"\r\n"
"<COLOUR_SCHEME font=\"&lt;Monospaced&gt;; 13.0\">\r\n"
"  <COLOUR name=\"Main Window Bkgd\" colour=\"FF29292A\"/>\r\n"
"  <COLOUR name=\"Treeview Highlight\" colour=\"2BFFFEC3\"/>\r\n"
"  <COLOUR name=\"Code Background\" colour=\"FF222222\"/>\r\n"
"  <COLOUR name=\"Line Number Bkgd\" colour=\"44C1C1C1\"/>\r\n"
"  <COLOUR name=\"Line Numbers\" colour=\"E9B2B2B2\"/>\r\n"
"  <COLOUR name=\"Plain Text\" colour=\"FFCECECE\"/>\r\n"
"  <COLOUR name=\"Selected Text Bkgd\" colour=\"FF2859AC\"/>\r\n"
"  <COLOUR name=\"Caret\" colour=\"FFFFFFFF\"/>\r\n"
"  <COLOUR name=\"Preprocessor Text\" colour=\"FFF8F631\"/>\r\n"
"  <COLOUR name=\"Punctuation\" colour=\"FFCFBEFF\"/>\r\n"
"  <COLOUR name=\"Bracket\" colour=\"FF058202\"/>\r\n"
"  <COLOUR name=\"String\" colour=\"FFBC45DD\"/>\r\n"
"  <COLOUR name=\"Float\" colour=\"ff885500\"/>\r\n"
"  <COLOUR name=\"Integer\" colour=\"FF42C8C4\"/>\r\n"
"  <COLOUR name=\"Identifier\" colour=\"FFCFCFCF\"/>\r\n"
"  <COLOUR name=\"Operator\" colour=\"FFC4EB19\"/>\r\n"
"  <COLOUR name=\"Keyword\" colour=\"FFEE6F6F\"/>\r\n"
"  <COLOUR name=\"Comment\" colour=\"FF72D20C\"/>\r\n"
"  <COLOUR name=\"Error\" colour=\"FFE60000\"/>\r\n"
"</COLOUR_SCHEME>\r\n";

const char* colourscheme_dark_xml = (const char*) temp_8d0c8f08;

//================== colourscheme_light.xml ==================
static const unsigned char temp_ae680ef6[] =
"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n"
"\r\n"
"<COLOUR_SCHEME font=\"&lt;Monospaced&gt;; 13.0\">\r\n"
"  <COLOUR name=\"Main Window Bkgd\" colour=\"FFE6E7E9\"/>\r\n"
"  <COLOUR name=\"Treeview Highlight\" colour=\"401111ee\"/>\r\n"
"  <COLOUR name=\"Code Background\" colour=\"ffffffff\"/>\r\n"
"  <COLOUR name=\"Line Number Bkgd\" colour=\"44999999\"/>\r\n"
"  <COLOUR name=\"Line Numbers\" colour=\"44000000\"/>\r\n"
"  <COLOUR name=\"Plain Text\" colour=\"ff000000\"/>\r\n"
"  <COLOUR name=\"Selected Text Bkgd\" colour=\"401111ee\"/>\r\n"
"  <COLOUR name=\"Caret\" colour=\"ff000000\"/>\r\n"
"  <COLOUR name=\"Preprocessor Text\" colour=\"ff660000\"/>\r\n"
"  <COLOUR name=\"Punctuation\" colour=\"ff004400\"/>\r\n"
"  <COLOUR name=\"Bracket\" colour=\"ff000055\"/>\r\n"
"  <COLOUR name=\"String\" colour=\"ff990099\"/>\r\n"
"  <COLOUR name=\"Float\" colour=\"ff885500\"/>\r\n"
"  <COLOUR name=\"Integer\" colour=\"ff880000\"/>\r\n"
"  <COLOUR name=\"Identifier\" colour=\"ff000000\"/>\r\n"
"  <COLOUR name=\"Operator\" colour=\"ff225500\"/>\r\n"
"  <COLOUR name=\"Keyword\" colour=\"ff0000cc\"/>\r\n"
"  <COLOUR name=\"Comment\" colour=\"ff00aa00\"/>\r\n"
"  <COLOUR name=\"Error\" colour=\"ffcc0000\"/>\r\n"
"</COLOUR_SCHEME>\r\n";

const char* colourscheme_light_xml = (const char*) temp_ae680ef6;

//================== jucer_AudioPluginEditorTemplate.cpp ==================
static const unsigned char temp_94288326[] =
"/*\r\n"
"  ==============================================================================\r\n"
"\r\n"
"    This file was auto-generated by the Introjucer!\r\n"
"\r\n"
"    It contains the basic startup code for a Juce application.\r\n"
"\r\n"
"  ==============================================================================\r\n"
"*/\r\n"
"\r\n"
"EDITORCPPHEADERS\r\n"
"\r\n"
"\r\n"
"//==============================================================================\r\n"
"EDITORCLASSNAME::EDITORCLASSNAME (FILTERCLASSNAME* ownerFilter)\r\n"
"    : AudioProcessorEditor (ownerFilter)\r\n"
"{\r\n"
"    // This is where our plugin's editor size is set.\r\n"
"    setSize (400, 300);\r\n"
"}\r\n"
"\r\n"
"EDITORCLASSNAME::~EDITORCLASSNAME()\r\n"
"{\r\n"
"}\r\n"
"\r\n"
"//==============================================================================\r\n"
"void EDITORCLASSNAME::paint (Graphics& g)\r\n"
"{\r\n"
"    g.fillAll (Colours::white);\r\n"
"    g.setColour (Colours::black);\r\n"
"    g.setFont (15.0f);\r\n"
"    g.drawFittedText (\"Hello World!\",\r\n"
"                      0, 0, getWidth(), getHeight(),\r\n"
"                      Justification::centred, 1);\r\n"
"}\r\n";

const char* jucer_AudioPluginEditorTemplate_cpp = (const char*) temp_94288326;

//================== jucer_AudioPluginEditorTemplate.h ==================
static const unsigned char temp_51ef86ab[] =
"/*\r\n"
"  ==============================================================================\r\n"
"\r\n"
"    This file was auto-generated by the Introjucer!\r\n"
"\r\n"
"    It contains the basic startup code for a Juce application.\r\n"
"\r\n"
"  ==============================================================================\r\n"
"*/\r\n"
"\r\n"
"#ifndef HEADERGUARD\r\n"
"#define HEADERGUARD\r\n"
"\r\n"
"EDITORHEADERS\r\n"
"\r\n"
"\r\n"
"//==============================================================================\r\n"
"/**\r\n"
"*/\r\n"
"class EDITORCLASSNAME  : public AudioProcessorEditor\r\n"
"{\r\n"
"public:\r\n"
"    EDITORCLASSNAME (FILTERCLASSNAME* ownerFilter);\r\n"
"    ~EDITORCLASSNAME();\r\n"
"\r\n"
"    //==============================================================================\r\n"
"    // This is just a standard Juce paint method...\r\n"
"    void paint (Graphics& g);\r\n"
"};\r\n"
"\r\n"
"\r\n"
"#endif  // HEADERGUARD\r\n";

const char* jucer_AudioPluginEditorTemplate_h = (const char*) temp_51ef86ab;

//================== jucer_AudioPluginFilterTemplate.cpp ==================
static const unsigned char temp_be1774b1[] =
"/*\r\n"
"  ==============================================================================\r\n"
"\r\n"
"    This file was auto-generated!\r\n"
"\r\n"
"    It contains the basic startup code for a Juce application.\r\n"
"\r\n"
"  ==============================================================================\r\n"
"*/\r\n"
"\r\n"
"FILTERHEADERS\r\n"
"\r\n"
"\r\n"
"//==============================================================================\r\n"
"FILTERCLASSNAME::FILTERCLASSNAME()\r\n"
"{\r\n"
"}\r\n"
"\r\n"
"FILTERCLASSNAME::~FILTERCLASSNAME()\r\n"
"{\r\n"
"}\r\n"
"\r\n"
"//==============================================================================\r\n"
"const String FILTERCLASSNAME::getName() const\r\n"
"{\r\n"
"    return JucePlugin_Name;\r\n"
"}\r\n"
"\r\n"
"int FILTERCLASSNAME::getNumParameters()\r\n"
"{\r\n"
"    return 0;\r\n"
"}\r\n"
"\r\n"
"float FILTERCLASSNAME::getParameter (int index)\r\n"
"{\r\n"
"    return 0.0f;\r\n"
"}\r\n"
"\r\n"
"void FILTERCLASSNAME::setParameter (int index, float newValue)\r\n"
"{\r\n"
"}\r\n"
"\r\n"
"const String FILTERCLASSNAME::getParameterName (int index)\r\n"
"{\r\n"
"    return String::empty;\r\n"
"}\r\n"
"\r\n"
"const String FILTERCLASSNAME::getParameterText (int index)\r\n"
"{\r\n"
"    return String::empty;\r\n"
"}\r\n"
"\r\n"
"const String FILTERCLASSNAME::getInputChannelName (int channelIndex) const\r\n"
"{\r\n"
"    return String (channelIndex + 1);\r\n"
"}\r\n"
"\r\n"
"const String FILTERCLASSNAME::getOutputChannelName (int channelIndex) const\r\n"
"{\r\n"
"    return String (channelIndex + 1);\r\n"
"}\r\n"
"\r\n"
"bool FILTERCLASSNAME::isInputChannelStereoPair (int index) const\r\n"
"{\r\n"
"    return true;\r\n"
"}\r\n"
"\r\n"
"bool FILTERCLASSNAME::isOutputChannelStereoPair (int index) const\r\n"
"{\r\n"
"    return true;\r\n"
"}\r\n"
"\r\n"
"bool FILTERCLASSNAME::acceptsMidi() const\r\n"
"{\r\n"
"   #if JucePlugin_WantsMidiInput\r\n"
"    return true;\r\n"
"   #else\r\n"
"    return false;\r\n"
"   #endif\r\n"
"}\r\n"
"\r\n"
"bool FILTERCLASSNAME::producesMidi() const\r\n"
"{\r\n"
"   #if JucePlugin_ProducesMidiOutput\r\n"
"    return true;\r\n"
"   #else\r\n"
"    return false;\r\n"
"   #endif\r\n"
"}\r\n"
"\r\n"
"bool FILTERCLASSNAME::silenceInProducesSilenceOut() const\r\n"
"{\r\n"
"    return false;\r\n"
"}\r\n"
"\r\n"
"double FILTERCLASSNAME::getTailLengthSeconds() const\r\n"
"{\r\n"
"    return 0.0;\r\n"
"}\r\n"
"\r\n"
"int FILTERCLASSNAME::getNumPrograms()\r\n"
"{\r\n"
"    return 0;\r\n"
"}\r\n"
"\r\n"
"int FILTERCLASSNAME::getCurrentProgram()\r\n"
"{\r\n"
"    return 0;\r\n"
"}\r\n"
"\r\n"
"void FILTERCLASSNAME::setCurrentProgram (int index)\r\n"
"{\r\n"
"}\r\n"
"\r\n"
"const String FILTERCLASSNAME::getProgramName (int index)\r\n"
"{\r\n"
"    return String::empty;\r\n"
"}\r\n"
"\r\n"
"void FILTERCLASSNAME::changeProgramName (int index, const String& newName)\r\n"
"{\r\n"
"}\r\n"
"\r\n"
"//==============================================================================\r\n"
"void FILTERCLASSNAME::prepareToPlay (double sampleRate, int samplesPerBlock)\r\n"
"{\r\n"
"    // Use this method as the place to do any pre-playback\r\n"
"    // initialisation that you need..\r\n"
"}\r\n"
"\r\n"
"void FILTERCLASSNAME::releaseResources()\r\n"
"{\r\n"
"    // When playback stops, you can use this as an opportunity to free up any\r\n"
"    // spare memory, etc.\r\n"
"}\r\n"
"\r\n"
"void FILTERCLASSNAME::processBlock (AudioSampleBuffer& buffer, MidiBuffer& midiMessages)\r\n"
"{\r\n"
"    // This is the place where you'd normally do the guts of your plugin's\r\n"
"    // audio processing...\r\n"
"    for (int channel = 0; channel < getNumInputChannels(); ++channel)\r\n"
"    {\r\n"
"        float* channelData = buffer.getSampleData (channel);\r\n"
"\r\n"
"        // ..do something to the data...\r\n"
"    }\r\n"
"\r\n"
"    // In case we have more outputs than inputs, we'll clear any output\r\n"
"    // channels that didn't contain input data, (because these aren't\r\n"
"    // guaranteed to be empty - they may contain garbage).\r\n"
"    for (int i = getNumInputChannels(); i < getNumOutputChannels(); ++i)\r\n"
"    {\r\n"
"        buffer.clear (i, 0, buffer.getNumSamples());\r\n"
"    }\r\n"
"}\r\n"
"\r\n"
"//==============================================================================\r\n"
"bool FILTERCLASSNAME::hasEditor() const\r\n"
"{\r\n"
"    return true; // (change this to false if you choose to not supply an editor)\r\n"
"}\r\n"
"\r\n"
"AudioProcessorEditor* FILTERCLASSNAME::createEditor()\r\n"
"{\r\n"
"    return new EDITORCLASSNAME (this);\r\n"
"}\r\n"
"\r\n"
"//==============================================================================\r\n"
"void FILTERCLASSNAME::getStateInformation (MemoryBlock& destData)\r\n"
"{\r\n"
"    // You should use this method to store your parameters in the memory block.\r\n"
"    // You could do that either as raw data, or use the XML or ValueTree classes\r\n"
"    // as intermediaries to make it easy to save and load complex data.\r\n"
"}\r\n"
"\r\n"
"void FILTERCLASSNAME::setStateInformation (const void* data, int sizeInBytes)\r\n"
"{\r\n"
"    // You should use this method to restore your parameters from this memory block,\r\n"
"    // whose contents will have been created by the getStateInformation() call.\r\n"
"}\r\n"
"\r\n"
"//==============================================================================\r\n"
"// This creates new instances of the plugin..\r\n"
"AudioProcessor* JUCE_CALLTYPE createPluginFilter()\r\n"
"{\r\n"
"    return new FILTERCLASSNAME();\r\n"
"}\r\n";

const char* jucer_AudioPluginFilterTemplate_cpp = (const char*) temp_be1774b1;

//================== jucer_AudioPluginFilterTemplate.h ==================
static const unsigned char temp_4d735ef6[] =
"/*\r\n"
"  ==============================================================================\r\n"
"\r\n"
"    This file was auto-generated!\r\n"
"\r\n"
"    It contains the basic startup code for a Juce application.\r\n"
"\r\n"
"  ==============================================================================\r\n"
"*/\r\n"
"\r\n"
"#ifndef HEADERGUARD\r\n"
"#define HEADERGUARD\r\n"
"\r\n"
"APPHEADERS\r\n"
"\r\n"
"\r\n"
"//==============================================================================\r\n"
"/**\r\n"
"*/\r\n"
"class FILTERCLASSNAME  : public AudioProcessor\r\n"
"{\r\n"
"public:\r\n"
"    //==============================================================================\r\n"
"    FILTERCLASSNAME();\r\n"
"    ~FILTERCLASSNAME();\r\n"
"\r\n"
"    //==============================================================================\r\n"
"    void prepareToPlay (double sampleRate, int samplesPerBlock);\r\n"
"    void releaseResources();\r\n"
"\r\n"
"    void processBlock (AudioSampleBuffer& buffer, MidiBuffer& midiMessages);\r\n"
"\r\n"
"    //==============================================================================\r\n"
"    AudioProcessorEditor* createEditor();\r\n"
"    bool hasEditor() const;\r\n"
"\r\n"
"    //==============================================================================\r\n"
"    const String getName() const;\r\n"
"\r\n"
"    int getNumParameters();\r\n"
"\r\n"
"    float getParameter (int index);\r\n"
"    void setParameter (int index, float newValue);\r\n"
"\r\n"
"    const String getParameterName (int index);\r\n"
"    const String getParameterText (int index);\r\n"
"\r\n"
"    const String getInputChannelName (int channelIndex) const;\r\n"
"    const String getOutputChannelName (int channelIndex) const;\r\n"
"    bool isInputChannelStereoPair (int index) const;\r\n"
"    bool isOutputChannelStereoPair (int index) const;\r\n"
"\r\n"
"    bool acceptsMidi() const;\r\n"
"    bool producesMidi() const;\r\n"
"    bool silenceInProducesSilenceOut() const;\r\n"
"    double getTailLengthSeconds() const;\r\n"
"\r\n"
"    //==============================================================================\r\n"
"    int getNumPrograms();\r\n"
"    int getCurrentProgram();\r\n"
"    void setCurrentProgram (int index);\r\n"
"    const String getProgramName (int index);\r\n"
"    void changeProgramName (int index, const String& newName);\r\n"
"\r\n"
"    //==============================================================================\r\n"
"    void getStateInformation (MemoryBlock& destData);\r\n"
"    void setStateInformation (const void* data, int sizeInBytes);\r\n"
"\r\n"
"private:\r\n"
"    //==============================================================================\r\n"
"    JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (FILTERCLASSNAME)\r\n"
"};\r\n"
"\r\n"
"#endif  // HEADERGUARD\r\n";

const char* jucer_AudioPluginFilterTemplate_h = (const char*) temp_4d735ef6;

//================== jucer_ContentCompTemplate.cpp ==================
static const unsigned char temp_90be2e98[] =
"/*\r\n"
"  ==============================================================================\r\n"
"\r\n"
"    This file was auto-generated!\r\n"
"\r\n"
"  ==============================================================================\r\n"
"*/\r\n"
"\r\n"
"INCLUDE_CORRESPONDING_HEADER\r\n"
"\r\n"
"\r\n"
"//==============================================================================\r\n"
"CONTENTCOMPCLASS::CONTENTCOMPCLASS()\r\n"
"{\r\n"
"    setSize (500, 400);\r\n"
"}\r\n"
"\r\n"
"CONTENTCOMPCLASS::~CONTENTCOMPCLASS()\r\n"
"{\r\n"
"}\r\n"
"\r\n"
"void CONTENTCOMPCLASS::paint (Graphics& g)\r\n"
"{\r\n"
"    g.fillAll (Colour (0xffeeddff));\r\n"
"\r\n"
"    g.setFont (Font (16.0f));\r\n"
"    g.setColour (Colours::black);\r\n"
"    g.drawText (\"Hello World!\", getLocalBounds(), Justification::centred, true);\r\n"
"}\r\n"
"\r\n"
"void CONTENTCOMPCLASS::resized()\r\n"
"{\r\n"
"    // This is called when the CONTENTCOMPCLASS is resized.\r\n"
"    // If you add any child components, this is where you should\r\n"
"    // update their positions.\r\n"
"}\r\n";

const char* jucer_ContentCompTemplate_cpp = (const char*) temp_90be2e98;

//================== jucer_ContentCompTemplate.h ==================
static const unsigned char temp_3a7d669d[] =
"/*\r\n"
"  ==============================================================================\r\n"
"\r\n"
"    This file was auto-generated!\r\n"
"\r\n"
"  ==============================================================================\r\n"
"*/\r\n"
"\r\n"
"#ifndef HEADERGUARD\r\n"
"#define HEADERGUARD\r\n"
"\r\n"
"INCLUDE_JUCE\r\n"
"\r\n"
"\r\n"
"//==============================================================================\r\n"
"/*\r\n"
"    This component lives inside our window, and this is where you should put all\r\n"
"    your controls and content.\r\n"
"*/\r\n"
"class CONTENTCOMPCLASS   : public Component\r\n"
"{\r\n"
"public:\r\n"
"    //==============================================================================\r\n"
"    CONTENTCOMPCLASS();\r\n"
"    ~CONTENTCOMPCLASS();\r\n"
"\r\n"
"    void paint (Graphics&);\r\n"
"    void resized();\r\n"
"\r\n"
"private:\r\n"
"    //==============================================================================\r\n"
"    JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (CONTENTCOMPCLASS)\r\n"
"};\r\n"
"\r\n"
"\r\n"
"#endif  // HEADERGUARD\r\n";

const char* jucer_ContentCompTemplate_h = (const char*) temp_3a7d669d;

//================== jucer_MainConsoleAppTemplate.cpp ==================
static const unsigned char temp_ec3040f1[] =
"/*\r\n"
"  ==============================================================================\r\n"
"\r\n"
"    This file was auto-generated!\r\n"
"\r\n"
"    It contains the basic startup code for a Juce application.\r\n"
"\r\n"
"  ==============================================================================\r\n"
"*/\r\n"
"\r\n"
"APPHEADERS\r\n"
"\r\n"
"\r\n"
"//==============================================================================\r\n"
"int main (int argc, char* argv[])\r\n"
"{\r\n"
"\r\n"
"    // ..your code goes here!\r\n"
"\r\n"
"\r\n"
"    return 0;\r\n"
"}\r\n";

const char* jucer_MainConsoleAppTemplate_cpp = (const char*) temp_ec3040f1;

//================== jucer_MainTemplate_NoWindow.cpp ==================
static const unsigned char temp_4073bfb3[] =
"/*\r\n"
"  ==============================================================================\r\n"
"\r\n"
"    This file was auto-generated by the Introjucer!\r\n"
"\r\n"
"    It contains the basic startup code for a Juce application.\r\n"
"\r\n"
"  ==============================================================================\r\n"
"*/\r\n"
"\r\n"
"APPHEADERS\r\n"
"\r\n"
"\r\n"
"//==============================================================================\r\n"
"class APPCLASSNAME  : public JUCEApplication\r\n"
"{\r\n"
"public:\r\n"
"    //==============================================================================\r\n"
"    APPCLASSNAME() {}\r\n"
"\r\n"
"    const String getApplicationName()       { return ProjectInfo::projectName; }\r\n"
"    const String getApplicationVersion()    { return ProjectInfo::versionString; }\r\n"
"    bool moreThanOneInstanceAllowed()       { return ALLOWMORETHANONEINSTANCE; }\r\n"
"\r\n"
"    //==============================================================================\r\n"
"    void initialise (const String& commandLine)\r\n"
"    {\r\n"
"        // Add your application's initialisation code here..\r\n"
"    }\r\n"
"\r\n"
"    void shutdown()\r\n"
"    {\r\n"
"        // Add your application's shutdown code here..\r\n"
"    }\r\n"
"\r\n"
"    //==============================================================================\r\n"
"    void systemRequestedQuit()\r\n"
"    {\r\n"
"        // This is called when the app is being asked to quit: you can ignore this\r\n"
"        // request and let the app carry on running, or call quit() to allow the app to close.\r\n"
"        quit();\r\n"
"    }\r\n"
"\r\n"
"    void anotherInstanceStarted (const String& commandLine)\r\n"
"    {\r\n"
"        // When another instance of the app is launched while this one is running,\r\n"
"        // this method is invoked, and the commandLine parameter tells you what\r\n"
"        // the other instance's command-line arguments were.\r\n"
"    }\r\n"
"};\r\n"
"\r\n"
"//==============================================================================\r\n"
"// This macro generates the main() routine that launches the app.\r\n"
"START_JUCE_APPLICATION (APPCLASSNAME)\r\n";

const char* jucer_MainTemplate_NoWindow_cpp = (const char*) temp_4073bfb3;

//================== jucer_MainTemplate_Window.cpp ==================
static const unsigned char temp_c5638a52[] =
"/*\r\n"
"  ==============================================================================\r\n"
"\r\n"
"    This file was auto-generated by the Introjucer!\r\n"
"\r\n"
"    It contains the basic startup code for a Juce application.\r\n"
"\r\n"
"  ==============================================================================\r\n"
"*/\r\n"
"\r\n"
"APPHEADERS\r\n"
"\r\n"
"\r\n"
"//==============================================================================\r\n"
"class APPCLASSNAME  : public JUCEApplication\r\n"
"{\r\n"
"public:\r\n"
"    //==============================================================================\r\n"
"    APPCLASSNAME() {}\r\n"
"\r\n"
"    const String getApplicationName()       { return ProjectInfo::projectName; }\r\n"
"    const String getApplicationVersion()    { return ProjectInfo::versionString; }\r\n"
"    bool moreThanOneInstanceAllowed()       { return ALLOWMORETHANONEINSTANCE; }\r\n"
"\r\n"
"    //==============================================================================\r\n"
"    void initialise (const String& commandLine)\r\n"
"    {\r\n"
"        // This method is where you should put your application's initialisation code..\r\n"
"\r\n"
"        mainWindow = new MainWindow();\r\n"
"    }\r\n"
"\r\n"
"    void shutdown()\r\n"
"    {\r\n"
"        // Add your application's shutdown code here..\r\n"
"\r\n"
"        mainWindow = nullptr; // (deletes our window)\r\n"
"    }\r\n"
"\r\n"
"    //==============================================================================\r\n"
"    void systemRequestedQuit()\r\n"
"    {\r\n"
"        // This is called when the app is being asked to quit: you can ignore this\r\n"
"        // request and let the app carry on running, or call quit() to allow the app to close.\r\n"
"        quit();\r\n"
"    }\r\n"
"\r\n"
"    void anotherInstanceStarted (const String& commandLine)\r\n"
"    {\r\n"
"        // When another instance of the app is launched while this one is running,\r\n"
"        // this method is invoked, and the commandLine parameter tells you what\r\n"
"        // the other instance's command-line arguments were.\r\n"
"    }\r\n"
"\r\n"
"    //==============================================================================\r\n"
"    /*\r\n"
"        This class implements the desktop window that contains an instance of\r\n"
"        our CONTENTCOMPCLASS class.\r\n"
"    */\r\n"
"    class MainWindow    : public DocumentWindow\r\n"
"    {\r\n"
"    public:\r\n"
"        MainWindow()  : DocumentWindow (\"MainWindow\",\r\n"
"                                        Colours::lightgrey,\r\n"
"                                        DocumentWindow::allButtons)\r\n"
"        {\r\n"
"            setContentOwned (new CONTENTCOMPCLASS(), true);\r\n"
"\r\n"
"            centreWithSize (getWidth(), getHeight());\r\n"
"            setVisible (true);\r\n"
"        }\r\n"
"\r\n"
"        void closeButtonPressed()\r\n"
"        {\r\n"
"            // This is called when the user tries to close this window. Here, we'll just\r\n"
"            // ask the app to quit when this happens, but you can change this to do\r\n"
"            // whatever you need.\r\n"
"            JUCEApplication::getInstance()->systemRequestedQuit();\r\n"
"        }\r\n"
"\r\n"
"        /* Note: Be careful if you override any DocumentWindow methods - the base\r\n"
"           class uses a lot of them, so by overriding you might break its functionality.\r\n"
"           It's best to do all your work in your content component instead, but if\r\n"
"           you really have to override any DocumentWindow methods, make sure your\r\n"
"           subclass also calls the superclass's method.\r\n"
"        */\r\n"
"\r\n"
"    private:\r\n"
"        JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (MainWindow)\r\n"
"    };\r\n"
"\r\n"
"private:\r\n"
"    ScopedPointer<MainWindow> mainWindow;\r\n"
"};\r\n"
"\r\n"
"//==============================================================================\r\n"
"// This macro generates the main() routine that launches the app.\r\n"
"START_JUCE_APPLICATION (APPCLASSNAME)\r\n";

const char* jucer_MainTemplate_Window_cpp = (const char*) temp_c5638a52;

//================== jucer_NewComponentTemplate.cpp ==================
static const unsigned char temp_1cc1dd0b[] =
"/*\r\n"
"  ==============================================================================\r\n"
"\r\n"
"    FILENAME\r\n"
"    Created: DATE\r\n"
"    Author:  AUTHOR\r\n"
"\r\n"
"  ==============================================================================\r\n"
"*/\r\n"
"\r\n"
"INCLUDE_JUCE\r\n"
"INCLUDE_CORRESPONDING_HEADER\r\n"
"\r\n"
"//==============================================================================\r\n"
"COMPONENTCLASS::COMPONENTCLASS()\r\n"
"{\r\n"
"    // In your constructor, you should add any child components, and\r\n"
"    // initialise any special settings that your component needs.\r\n"
"\r\n"
"}\r\n"
"\r\n"
"COMPONENTCLASS::~COMPONENTCLASS()\r\n"
"{\r\n"
"}\r\n"
"\r\n"
"void COMPONENTCLASS::paint (Graphics& g)\r\n"
"{\r\n"
"    /* This demo code just fills the component's background and\r\n"
"       draws some placeholder text to get you started.\r\n"
"\r\n"
"       You should replace everything in this method with your own\r\n"
"       drawing code..\r\n"
"    */\r\n"
"\r\n"
"    g.fillAll (Colours::white);   // clear the background\r\n"
"\r\n"
"    g.setColour (Colours::grey);\r\n"
"    g.drawRect (getLocalBounds(), 1);   // draw an outline around the component\r\n"
"\r\n"
"    g.setColour (Colours::lightblue);\r\n"
"    g.setFont (14.0f);\r\n"
"    g.drawText (\"COMPONENTCLASS\", getLocalBounds(),\r\n"
"                Justification::centred, true);   // draw some placeholder text\r\n"
"}\r\n"
"\r\n"
"void COMPONENTCLASS::resized()\r\n"
"{\r\n"
"    // This method is where you should set the bounds of any child\r\n"
"    // components that your component contains..\r\n"
"\r\n"
"}\r\n";

const char* jucer_NewComponentTemplate_cpp = (const char*) temp_1cc1dd0b;

//================== jucer_NewComponentTemplate.h ==================
static const unsigned char temp_787015d0[] =
"/*\r\n"
"  ==============================================================================\r\n"
"\r\n"
"    FILENAME\r\n"
"    Created: DATE\r\n"
"    Author:  AUTHOR\r\n"
"\r\n"
"  ==============================================================================\r\n"
"*/\r\n"
"\r\n"
"#ifndef HEADERGUARD\r\n"
"#define HEADERGUARD\r\n"
"\r\n"
"INCLUDE_JUCE\r\n"
"\r\n"
"//==============================================================================\r\n"
"/*\r\n"
"*/\r\n"
"class COMPONENTCLASS    : public Component\r\n"
"{\r\n"
"public:\r\n"
"    COMPONENTCLASS();\r\n"
"    ~COMPONENTCLASS();\r\n"
"\r\n"
"    void paint (Graphics&);\r\n"
"    void resized();\r\n"
"\r\n"
"private:\r\n"
"    JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (COMPONENTCLASS)\r\n"
"};\r\n"
"\r\n"
"\r\n"
"#endif  // HEADERGUARD\r\n";

const char* jucer_NewComponentTemplate_h = (const char*) temp_787015d0;

//================== jucer_NewCppFileTemplate.cpp ==================
static const unsigned char temp_933d528d[] =
"/*\r\n"
"  ==============================================================================\r\n"
"\r\n"
"    FILENAME\r\n"
"    Created: DATE\r\n"
"    Author:  AUTHOR\r\n"
"\r\n"
"  ==============================================================================\r\n"
"*/\r\n"
"\r\n"
"INCLUDE_CORRESPONDING_HEADER\r\n";

const char* jucer_NewCppFileTemplate_cpp = (const char*) temp_933d528d;

//================== jucer_NewCppFileTemplate.h ==================
static const unsigned char temp_92ef03d2[] =
"/*\r\n"
"  ==============================================================================\r\n"
"\r\n"
"    FILENAME\r\n"
"    Created: DATE\r\n"
"    Author:  AUTHOR\r\n"
"\r\n"
"  ==============================================================================\r\n"
"*/\r\n"
"\r\n"
"#ifndef HEADERGUARD\r\n"
"#define HEADERGUARD\r\n"
"\r\n"
"\r\n"
"\r\n"
"\r\n"
"\r\n"
"#endif  // HEADERGUARD\r\n";

const char* jucer_NewCppFileTemplate_h = (const char*) temp_92ef03d2;

//================== jucer_NewInlineComponentTemplate.h ==================
static const unsigned char temp_cf0b1f37[] =
"/*\r\n"
"  ==============================================================================\r\n"
"\r\n"
"    FILENAME\r\n"
"    Created: DATE\r\n"
"    Author:  AUTHOR\r\n"
"\r\n"
"  ==============================================================================\r\n"
"*/\r\n"
"\r\n"
"#ifndef HEADERGUARD\r\n"
"#define HEADERGUARD\r\n"
"\r\n"
"INCLUDE_JUCE\r\n"
"\r\n"
"//==============================================================================\r\n"
"/*\r\n"
"*/\r\n"
"class COMPONENTCLASS    : public Component\r\n"
"{\r\n"
"public:\r\n"
"    COMPONENTCLASS()\r\n"
"    {\r\n"
"        // In your constructor, you should add any child components, and\r\n"
"        // initialise any special settings that your component needs.\r\n"
"\r\n"
"    }\r\n"
"\r\n"
"    ~COMPONENTCLASS()\r\n"
"    {\r\n"
"    }\r\n"
"\r\n"
"    void paint (Graphics& g)\r\n"
"    {\r\n"
"        /* This demo code just fills the component's background and\r\n"
"           draws some placeholder text to get you started.\r\n"
"\r\n"
"           You should replace everything in this method with your own\r\n"
"           drawing code..\r\n"
"        */\r\n"
"\r\n"
"        g.fillAll (Colours::white);   // clear the background\r\n"
"\r\n"
"        g.setColour (Colours::grey);\r\n"
"        g.drawRect (getLocalBounds(), 1);   // draw an outline around the component\r\n"
"\r\n"
"        g.setColour (Colours::lightblue);\r\n"
"        g.setFont (14.0f);\r\n"
"        g.drawText (\"COMPONENTCLASS\", getLocalBounds(),\r\n"
"                    Justification::centred, true);   // draw some placeholder text\r\n"
"    }\r\n"
"\r\n"
"    void resized()\r\n"
"    {\r\n"
"        // This method is where you should set the bounds of any child\r\n"
"        // components that your component contains..\r\n"
"\r\n"
"    }\r\n"
"\r\n"
"private:\r\n"
"    JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (COMPONENTCLASS)\r\n"
"};\r\n"
"\r\n"
"\r\n"
"#endif  // HEADERGUARD\r\n";

const char* jucer_NewInlineComponentTemplate_h = (const char*) temp_cf0b1f37;

//================== RecentFilesMenuTemplate.nib ==================
static const unsigned char temp_6ee48989[] =
{ 98,112,108,105,115,116,48,48,212,0,1,0,2,0,3,0,4,0,5,0,6,1,53,1,54,88,36,118,101,114,115,105,111,110,88,36,111,98,106,101,99,116,115,89,36,97,114,99,104,105,118,101,114,84,36,116,111,112,18,0,1,134,160,175,16,74,0,7,0,8,0,31,0,35,0,36,0,42,0,46,0,50,
0,53,0,57,0,74,0,77,0,78,0,86,0,87,0,97,0,112,0,113,0,114,0,119,0,120,0,121,0,124,0,128,0,129,0,132,0,143,0,144,0,145,0,149,0,153,0,162,0,163,0,164,0,169,0,173,0,180,0,181,0,182,0,185,0,192,0,193,0,200,0,201,0,208,0,209,0,216,0,217,0,224,0,225,0,226,
0,229,0,230,0,232,0,249,1,11,1,29,1,30,1,31,1,32,1,33,1,34,1,35,1,36,1,37,1,38,1,39,1,40,1,41,1,42,1,43,1,44,1,47,1,50,85,36,110,117,108,108,219,0,9,0,10,0,11,0,12,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,27,0,28,0,29,0,
29,95,16,16,78,83,86,105,115,105,98,108,101,87,105,110,100,111,119,115,93,78,83,79,98,106,101,99,116,115,75,101,121,115,86,78,83,82,111,111,116,92,78,83,79,105,100,115,86,97,108,117,101,115,86,36,99,108,97,115,115,90,78,83,79,105,100,115,75,101,121,115,
93,78,83,67,111,110,110,101,99,116,105,111,110,115,95,16,15,78,83,79,98,106,101,99,116,115,86,97,108,117,101,115,95,16,25,78,83,65,99,99,101,115,115,105,98,105,108,105,116,121,67,111,110,110,101,99,116,111,114,115,95,16,23,78,83,65,99,99,101,115,115,
105,98,105,108,105,116,121,79,105,100,115,75,101,121,115,95,16,25,78,83,65,99,99,101,115,115,105,98,105,108,105,116,121,79,105,100,115,86,97,108,117,101,115,128,5,128,9,128,2,128,55,128,73,128,54,128,7,128,53,128,71,128,72,128,72,210,0,13,0,32,0,33,0,
34,91,78,83,67,108,97,115,115,78,97,109,101,128,4,128,3,93,78,83,65,112,112,108,105,99,97,116,105,111,110,210,0,37,0,38,0,39,0,40,90,36,99,108,97,115,115,110,97,109,101,88,36,99,108,97,115,115,101,115,94,78,83,67,117,115,116,111,109,79,98,106,101,99,
116,162,0,39,0,41,88,78,83,79,98,106,101,99,116,210,0,13,0,43,0,44,0,45,90,78,83,46,111,98,106,101,99,116,115,128,6,160,210,0,37,0,38,0,47,0,48,92,78,83,77,117,116,97,98,108,101,83,101,116,163,0,47,0,49,0,41,85,78,83,83,101,116,210,0,13,0,43,0,51,0,52,
128,8,160,210,0,37,0,38,0,54,0,55,94,78,83,77,117,116,97,98,108,101,65,114,114,97,121,163,0,54,0,56,0,41,87,78,83,65,114,114,97,121,210,0,13,0,43,0,58,0,59,128,52,174,0,60,0,61,0,62,0,63,0,64,0,65,0,66,0,67,0,68,0,69,0,70,0,71,0,72,0,73,128,10,128,12,
128,45,128,15,128,39,128,25,128,28,128,30,128,33,128,35,128,43,128,41,128,47,128,50,210,0,13,0,32,0,33,0,76,128,4,128,11,93,78,83,65,112,112,108,105,99,97,116,105,111,110,212,0,79,0,13,0,80,0,81,0,82,0,83,0,84,0,85,91,78,83,77,101,110,117,73,116,101,
109,115,86,78,83,78,97,109,101,87,78,83,84,105,116,108,101,128,14,128,38,128,49,128,13,89,65,77,97,105,110,77,101,110,117,210,0,13,0,43,0,51,0,89,128,8,167,0,63,0,65,0,64,0,71,0,70,0,62,0,72,128,15,128,25,128,39,128,41,128,43,128,45,128,47,216,0,98,0,
99,0,100,0,13,0,101,0,102,0,103,0,81,0,104,0,61,0,106,0,107,0,108,0,109,0,110,0,111,95,16,17,78,83,75,101,121,69,113,117,105,118,77,111,100,77,97,115,107,86,78,83,77,101,110,117,89,78,83,79,110,73,109,97,103,101,90,78,83,75,101,121,69,113,117,105,118,
93,78,83,77,110,101,109,111,110,105,99,76,111,99,92,78,83,77,105,120,101,100,73,109,97,103,101,18,0,16,0,0,128,12,128,18,128,24,128,17,18,127,255,255,255,128,22,128,16,91,100,101,108,109,101,65,112,112,75,105,116,80,211,0,13,0,115,0,32,0,116,0,117,0,
118,94,78,83,82,101,115,111,117,114,99,101,78,97,109,101,128,21,128,20,128,19,87,78,83,73,109,97,103,101,95,16,15,78,83,77,101,110,117,67,104,101,99,107,109,97,114,107,210,0,37,0,38,0,122,0,123,95,16,16,78,83,67,117,115,116,111,109,82,101,115,111,117,
114,99,101,162,0,122,0,41,211,0,13,0,115,0,32,0,116,0,126,0,118,128,21,128,23,128,19,95,16,16,78,83,77,101,110,117,77,105,120,101,100,83,116,97,116,101,210,0,37,0,38,0,130,0,131,90,78,83,77,101,110,117,73,116,101,109,162,0,130,0,41,218,0,133,0,98,0,134,
0,99,0,100,0,13,0,101,0,102,0,103,0,81,0,135,0,104,0,66,0,61,0,106,0,107,0,108,0,109,0,110,0,142,88,78,83,65,99,116,105,111,110,89,78,83,83,117,98,109,101,110,117,128,27,128,28,128,12,128,18,128,24,128,17,128,22,128,26,84,70,105,108,101,94,115,117,98,
109,101,110,117,65,99,116,105,111,110,58,211,0,79,0,13,0,81,0,146,0,83,0,142,128,29,128,38,128,26,210,0,13,0,43,0,51,0,151,128,8,161,0,67,128,30,218,0,133,0,98,0,134,0,99,0,100,0,13,0,101,0,102,0,103,0,81,0,154,0,104,0,68,0,66,0,106,0,107,0,108,0,109,
0,110,0,161,128,32,128,33,128,28,128,18,128,24,128,17,128,22,128,31,91,79,112,101,110,32,82,101,99,101,110,116,94,115,117,98,109,101,110,117,65,99,116,105,111,110,58,212,0,79,0,13,0,80,0,81,0,165,0,83,0,167,0,161,128,34,128,38,128,37,128,31,210,0,13,
0,43,0,51,0,171,128,8,161,0,69,128,35,216,0,98,0,99,0,100,0,13,0,101,0,102,0,103,0,81,0,104,0,68,0,106,0,107,0,108,0,109,0,110,0,179,128,33,128,18,128,24,128,17,128,22,128,36,90,67,108,101,97,114,32,77,101,110,117,95,16,22,95,78,83,82,101,99,101,110,
116,68,111,99,117,109,101,110,116,115,77,101,110,117,210,0,37,0,38,0,183,0,184,86,78,83,77,101,110,117,162,0,183,0,41,216,0,98,0,99,0,100,0,13,0,101,0,102,0,103,0,81,0,104,0,61,0,106,0,107,0,108,0,109,0,110,0,191,128,12,128,18,128,24,128,17,128,22,128,
40,84,69,100,105,116,215,0,99,0,100,0,13,0,101,0,102,0,103,0,81,0,61,0,106,0,107,0,108,0,109,0,110,0,199,128,12,128,18,128,24,128,17,128,22,128,42,86,70,111,114,109,97,116,216,0,98,0,99,0,100,0,13,0,101,0,102,0,103,0,81,0,104,0,61,0,106,0,107,0,108,0,
109,0,110,0,207,128,12,128,18,128,24,128,17,128,22,128,44,84,86,105,101,119,216,0,98,0,99,0,100,0,13,0,101,0,102,0,103,0,81,0,104,0,61,0,106,0,107,0,108,0,109,0,110,0,215,128,12,128,18,128,24,128,17,128,22,128,46,86,87,105,110,100,111,119,215,0,99,0,
100,0,13,0,101,0,102,0,103,0,81,0,61,0,106,0,107,0,108,0,109,0,110,0,223,128,12,128,18,128,24,128,17,128,22,128,48,84,72,101,108,112,91,95,78,83,77,97,105,110,77,101,110,117,210,0,13,0,32,0,33,0,228,128,4,128,51,93,78,83,70,111,110,116,77,97,110,97,103,
101,114,210,0,37,0,38,0,56,0,231,162,0,56,0,41,210,0,13,0,43,0,58,0,234,128,52,174,0,22,0,22,0,61,0,61,0,61,0,61,0,65,0,66,0,67,0,68,0,61,0,61,0,61,0,22,128,2,128,2,128,12,128,12,128,12,128,12,128,25,128,28,128,30,128,33,128,12,128,12,128,12,128,2,210,
0,13,0,43,0,58,0,251,128,52,175,16,15,0,22,0,60,0,61,0,62,0,63,0,64,0,65,0,66,0,67,0,68,0,69,0,70,0,71,0,72,0,73,128,2,128,10,128,12,128,45,128,15,128,39,128,25,128,28,128,30,128,33,128,35,128,43,128,41,128,47,128,50,210,0,13,0,43,0,58,1,13,128,52,175,
16,15,1,14,1,15,1,16,1,17,1,18,1,19,1,20,1,21,1,22,1,23,1,24,1,25,1,26,1,27,1,28,128,56,128,57,128,58,128,59,128,60,128,61,128,62,128,63,128,64,128,65,128,66,128,67,128,68,128,69,128,70,17,2,22,17,2,23,17,2,24,17,2,25,17,2,26,17,2,27,17,2,28,17,2,29,
17,2,30,17,2,31,17,2,32,17,2,33,17,2,34,17,2,35,17,2,36,210,0,13,0,43,0,51,1,46,128,8,160,210,0,13,0,43,0,58,1,49,128,52,160,210,0,37,0,38,1,51,1,52,94,78,83,73,66,79,98,106,101,99,116,68,97,116,97,162,1,51,0,41,95,16,15,78,83,75,101,121,101,100,65,114,
99,104,105,118,101,114,209,1,55,1,56,93,73,66,46,111,98,106,101,99,116,100,97,116,97,128,1,0,8,0,25,0,34,0,43,0,53,0,58,0,63,0,214,0,220,1,9,1,28,1,42,1,49,1,62,1,69,1,80,1,94,1,112,1,140,1,166,1,194,1,196,1,198,1,200,1,202,1,204,1,206,1,208,1,210,1,
212,1,214,1,216,1,225,1,237,1,239,1,241,1,255,2,8,2,19,2,28,2,43,2,48,2,57,2,66,2,77,2,79,2,80,2,89,2,102,2,109,2,115,2,124,2,126,2,127,2,136,2,151,2,158,2,166,2,175,2,177,2,206,2,208,2,210,2,212,2,214,2,216,2,218,2,220,2,222,2,224,2,226,2,228,2,230,
2,232,2,234,2,243,2,245,2,247,3,5,3,22,3,34,3,41,3,49,3,51,3,53,3,55,3,57,3,67,3,76,3,78,3,93,3,95,3,97,3,99,3,101,3,103,3,105,3,107,3,140,3,160,3,167,3,177,3,188,3,202,3,215,3,220,3,222,3,224,3,226,3,228,3,233,3,235,3,237,3,249,3,250,4,7,4,22,4,24,4,
26,4,28,4,36,4,54,4,63,4,82,4,87,4,100,4,102,4,104,4,106,4,125,4,134,4,145,4,150,4,191,4,200,4,210,4,212,4,214,4,216,4,218,4,220,4,222,4,224,4,226,4,231,4,246,5,3,5,5,5,7,5,9,5,18,5,20,5,23,5,25,5,66,5,68,5,70,5,72,5,74,5,76,5,78,5,80,5,82,5,94,5,109,
5,126,5,128,5,130,5,132,5,134,5,143,5,145,5,148,5,150,5,183,5,185,5,187,5,189,5,191,5,193,5,195,5,206,5,231,5,240,5,247,5,252,6,29,6,31,6,33,6,35,6,37,6,39,6,41,6,46,6,75,6,77,6,79,6,81,6,83,6,85,6,87,6,94,6,127,6,129,6,131,6,133,6,135,6,137,6,139,6,
144,6,177,6,179,6,181,6,183,6,185,6,187,6,189,6,196,6,225,6,227,6,229,6,231,6,233,6,235,6,237,6,242,6,254,7,7,7,9,7,11,7,25,7,34,7,39,7,48,7,50,7,79,7,81,7,83,7,85,7,87,7,89,7,91,7,93,7,95,7,97,7,99,7,101,7,103,7,105,7,107,7,116,7,118,7,151,7,153,7,155,
7,157,7,159,7,161,7,163,7,165,7,167,7,169,7,171,7,173,7,175,7,177,7,179,7,181,7,190,7,192,7,225,7,227,7,229,7,231,7,233,7,235,7,237,7,239,7,241,7,243,7,245,7,247,7,249,7,251,7,253,7,255,8,2,8,5,8,8,8,11,8,14,8,17,8,20,8,23,8,26,8,29,8,32,8,35,8,38,8,
41,8,44,8,53,8,55,8,56,8,65,8,67,8,68,8,77,8,92,8,97,8,115,8,120,8,134,0,0,0,0,0,0,2,2,0,0,0,0,0,0,1,57,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,136,0,0 };

const char* RecentFilesMenuTemplate_nib = (const char*) temp_6ee48989;


const char* getNamedResource (const char*, int&) throw();
const char* getNamedResource (const char* resourceNameUTF8, int& numBytes) throw()
{
    unsigned int hash = 0;
    if (resourceNameUTF8 != 0)
        while (*resourceNameUTF8 != 0)
            hash = 31 * hash + (unsigned int) *resourceNameUTF8++;

    switch (hash)
    {
        case 0x15641f9c:  numBytes = 609; return button_png;
        case 0xdbcbc65e:  numBytes = 743; return label_png;
        case 0x6f09455a:  numBytes = 9880; return window_png;
        case 0x44be9398:  numBytes = 2101; return AudioPluginXCodeScript_txt;
        case 0x4a0cfd09:  numBytes = 151; return background_tile_png;
        case 0x763d39dc:  numBytes = 1050; return colourscheme_dark_xml;
        case 0xe8b08520:  numBytes = 1050; return colourscheme_light_xml;
        case 0x27c5a93a:  numBytes = 1008; return jucer_AudioPluginEditorTemplate_cpp;
        case 0x4d0721bf:  numBytes = 799; return jucer_AudioPluginEditorTemplate_h;
        case 0x51b49ac5:  numBytes = 4638; return jucer_AudioPluginFilterTemplate_cpp;
        case 0x488afa0a:  numBytes = 2488; return jucer_AudioPluginFilterTemplate_h;
        case 0x0b66646c:  numBytes = 886; return jucer_ContentCompTemplate_cpp;
        case 0x6fa10171:  numBytes = 924; return jucer_ContentCompTemplate_h;
        case 0x8905395b:  numBytes = 470; return jucer_MainConsoleAppTemplate_cpp;
        case 0x5e5ea047:  numBytes = 1947; return jucer_MainTemplate_NoWindow_cpp;
        case 0x400bc026:  numBytes = 3613; return jucer_MainTemplate_Window_cpp;
        case 0xf4842835:  numBytes = 1389; return jucer_NewComponentTemplate_cpp;
        case 0xe7bf237a:  numBytes = 648; return jucer_NewComponentTemplate_h;
        case 0x02a2a077:  numBytes = 262; return jucer_NewCppFileTemplate_cpp;
        case 0x0842c43c:  numBytes = 308; return jucer_NewCppFileTemplate_h;
        case 0x36e634a1:  numBytes = 1626; return jucer_NewInlineComponentTemplate_h;
        case 0xa41e649d:  numBytes = 2842; return RecentFilesMenuTemplate_nib;
        default: break;
    }

    numBytes = 0;
    return 0;
}

}
